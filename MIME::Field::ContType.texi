@node MIME/Field/ContType, MIME/Field/ParamVal, MIME/Field/ContDisp, Module List
@unnumbered a "Content-type" field


@unnumberedsec NAME

MIME::Field::ContType - a "Content-type" field

@unnumberedsec DESCRIPTION

A subclass of Mail::Field.

@emph{Don@'t use this class directly... its name may change in the future!}
Instead, ask Mail::Field for new instances based on the field name!

@unnumberedsec SYNOPSIS

@example
use Mail::Field;
use MIME::Head;

# Create an instance from some text:
$field = Mail::Field->new(@'Content-type@', 
                          @'text/HTML; charset="US-ASCII"@');

# Get the MIME type, like @'text/plain@' or @'x-foobar@'.
# Returns @'text/plain@' as default, as per RFC-1521:
my ($type, $subtype) = split(@'/@', $field->type);
@end example

@example
# Get generic information:
print $field->name;

# Get information related to "message" type:
if ($type eq @'message@') @{
	print $field->id;
	print $field->number;
	print $field->total;
@}

# Get information related to "multipart" type:
if ($type eq @'multipart@') @{
	print $field->boundary;            # the basic value, fixed up
	print $field->multipart_boundary;  # empty if not a multipart message!
@}

# Get information related to "text" type:
if ($type eq @'text@') @{
	print $field->charset;      # returns @'us-ascii@' as default
@}     
@end example

@unnumberedsec NOTES

Since nearly all (if not all) parameters must have non-empty values
to be considered valid, we just return the empty string to signify 
missing fields.  If you need to get the @emph{real} underlying value,
use the inherited @code{param()} method (which returns undef if the 
parameter is missing).

@unnumberedsec PUBLIC INTERFACE

@table @asis
@item boundary
Return the boundary field.  The boundary is returned exactly 
as given in the @code{Content-type:} field; that is, the leading 
double-hyphen (@code{--}) is @emph{not} prepended.

(Well, @emph{almost} exactly... from RFC-1521:

@example
(If a boundary appears to end with white space, the white space 
must be presumed to have been added by a gateway, and must be deleted.)  
@end example

so we oblige and remove any trailing spaces.)

Returns the empty string if there is no boundary, or if the boundary is
illegal (e.g., if it is empty after all trailing whitespace has been
removed).

@item multipart_boundary
Like @code{boundary()}, except that this will also return the empty
string if the message is not a multipart message.  In other words,
there@'s an automatic sanity check.

@item type
Try real hard to determine the content type (e.g., @code{"text/plain"},
@code{"image/gif"}, @code{"x-weird-type"}, which is returned 
in all-lowercase.  

A happy thing: the following code will work just as you would want,
even if there@'s no subtype (as in @code{"x-weird-type"})... in such a case,
the $subtype would simply be the empty string:

@example
($type, $subtype) = split(@'/@', $head->mime_type);
@end example

If the content-type information is missing, it defaults to @code{"text/plain"}, 
as per RFC-1521:

@example
Default RFC-822 messages are typed by this protocol as plain text in
the US-ASCII character set, which can be explicitly specified as
"Content-type: text/plain; charset=us-ascii".  If no Content-Type is
specified, this default is assumed.  
@end example

If @emph{just} the subtype is missing (a syntax error unless the type
begins with @code{"x-"}, but we@'ll tolerate it, since some brain-dead mailers 
actually do this), then it simply is not reported; e.g., 
@code{"Content-type: TEXT"} is returned simply as @code{"text"}.

If the content type is present but can@'t be parsed at all (yow!), 
the empty string is returned.

@end table
