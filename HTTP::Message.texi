@node HTTP/Message, HTTP/Negotiate, HTTP/Headers, Module List
@unnumbered Class encapsulating HTTP messages


@unnumberedsec NAME

HTTP::Message - Class encapsulating HTTP messages

@unnumberedsec DESCRIPTION

A @code{HTTP::Message} object contains some headers and a content (body).
The class is abstract, i.e. it only used as a base class for
@code{HTTP::Request} and @code{HTTP::Response} and should never instantiated
as itself.

@unnumberedsec METHODS

@unnumberedsubsec $mess = new HTTP::Message;

This is the object constructor.  It should only be called internally
by this library.  External code should construct @code{HTTP::Request} or
@code{HTTP::Response} objects.

@unnumberedsubsec $mess->clone()

Returns a copy of the object.

@unnumberedsubsec $mess->protocol([$proto])

Sets the HTTP protocol used for the message.  The protocol() is a string
like "HTTP/1.0" or "HTTP/1.1".

@unnumberedsubsec $mess->content([$content])

The content() method sets the content if an argument is given.  If no
argument is given the content is not touched.  In either case the
previous content is returned.

@unnumberedsubsec $mess->add_content($data)

The add_content() methods appends more data to the end of the previous
content.

@unnumberedsubsec $mess->content_ref

The content_ref() method will return a reference to content string.
It can be more efficient to access the content this way if the content
is huge, and it can be used for direct manipulation of the content,
for instance:

@example
$@{$res->content_ref@} =~ s/\bfoo\b/bar/g;
@end example

@unnumberedsec HEADER METHODS

All unknown @code{HTTP::Message} methods are delegated to the
@code{HTTP::Headers} object that is part of every message.  This allows
convenient access to these methods.  Refer to @xref{HTTP/Headers,HTTP/Headers}, for
details of these methods:

@example
$mess->header($field => $val);
$mess->scan(&doit);
$mess->push_header($field => $val);
$mess->remove_header($field);
@end example

@example
$mess->date;
$mess->expires;
$mess->if_modified_since;
$mess->last_modified;
$mess->content_type;
$mess->content_encoding;
$mess->content_length;
$mess->title;
$mess->user_agent;
$mess->server;
$mess->from;
$mess->referer;
$mess->www_authenticate;
$mess->authorization;
$mess->authorization_basic;
@end example

@unnumberedsubsec $mess->headers_as_string([$endl])

Call the HTTP::Headers->as_string() method for the headers in the
message.

