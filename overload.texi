@node overload, ptkFAQ, ops, Module List
@unnumbered Package for overloading perl operations


@unnumberedsec NAME 

overload - Package for overloading perl operations

@unnumberedsec SYNOPSIS

@example
package SomeThing;
@end example

@example
use overload 
	@'+@' => \&myadd,
	@'-@' => \&mysub;
	# etc
...
@end example

@example
package main;
$a = new SomeThing 57;
$b=5+$a;
...
if (overload::Overloaded $b) @{...@}
...
$strval = overload::StrVal $b;
@end example

@unnumberedsec CAVEAT SCRIPTOR

Overloading of operators is a subject not to be taken lightly.
Neither its precise implementation, syntax, nor semantics are
100% endorsed by Larry Wall.  So any of these may be changed 
at some point in the future.

@unnumberedsec DESCRIPTION

@unnumberedsubsec Declaration of overloaded functions

The compilation directive

@example
package Number;
use overload
	"+" => \&add, 
	"*=" => "muas";
@end example

declares function Number::add() for addition, and method muas() in
the "class" @code{Number} (or one of its base classes)
for the assignment form @code{*=} of multiplication.  

Arguments of this directive come in (key, value) pairs.  Legal values
are values legal inside a @code{&@{ ... @}} call, so the name of a subroutine,
a reference to a subroutine, or an anonymous subroutine will all work.
Legal keys are listed below.

The subroutine add will be called to execute @code{$a+$b} if $a
is a reference to an object blessed into the package @code{Number}, or if $a is
not an object from a package with defined mathemagic addition, but $b is a
reference to a @code{Number}.  It can also be called in other situations, like
@code{$a+=7}, or @code{$a++}.  See @samp{MAGIC AUTOGENERATION} in this node.  (Mathemagical
methods refer to methods triggered by an overloaded mathematical
operator.)

@unnumberedsubsec Calling Conventions for Binary Operations

The functions specified in the @code{use overload ...} directive are called
with three (in one particular case with four, see @samp{Last Resort} in this node)
arguments.  If the corresponding operation is binary, then the first
two arguments are the two arguments of the operation.  However, due to
general object calling conventions, the first argument should always be
an object in the package, so in the situation of @code{7+$a}, the
order of the arguments is interchanged.  It probably does not matter
when implementing the addition method, but whether the arguments
are reversed is vital to the subtraction method.  The method can
query this information by examining the third argument, which can take
three different values:

@table @asis
@item FALSE
the order of arguments is as in the current operation.

@item TRUE
the arguments are reversed.

@item undef
the current operation is an assignment variant (as in
@code{$a+=7}), but the usual function is called instead.  This additional
information can be used to generate some optimizations.

@end table
@unnumberedsubsec Calling Conventions for Unary Operations

Unary operation are considered binary operations with the second
argument being undef.  Thus the functions that overloads @code{@{"++"@}}
is called with arguments @code{($a,undef,@'@')} when $a++ is executed.

@unnumberedsubsec Overloadable Operations

The following symbols can be specified in @code{use overload}:

@itemize @bullet
@item @emph{Arithmetic operations}
@example
"+", "+=", "-", "-=", "*", "*=", "/", "/=", "%", "%=",
"**", "**=", "<<", "<<=", ">>", ">>=", "x", "x=", ".", ".=",
@end example


For these operations a substituted non-assignment variant can be called if
the assignment variant is not available.  Methods for operations "+",
"-", "@code{+=}", and "@code{-=}" can be called to automatically generate
increment and decrement methods.  The operation "-" can be used to
autogenerate missing methods for unary minus or abs.

@item @emph{Comparison operations}
@example
"<",  "<=", ">",  ">=", "==", "!=", "<=>",
"lt", "le", "gt", "ge", "eq", "ne", "cmp",
@end example


If the corresponding "spaceship" variant is available, it can be
used to substitute for the missing operation.  During sorting
arrays, cmp is used to compare values subject to @code{use overload}.

@item @emph{Bit operations}
@example
"&", "^", "|", "neg", "!", "~",
@end example


"@code{neg}" stands for unary minus.  If the method for @code{neg} is not
specified, it can be autogenerated using the method for
subtraction. If the method for "!" is not specified, it can be
autogenerated using the methods for "@code{bool}", or "@code{\"\"}", or "@code{0+}".

@item @emph{Increment and decrement}
@example
"++", "--",
@end example


If undefined, addition and subtraction methods can be
used instead.  These operations are called both in prefix and
postfix form.

@item @emph{Transcendental functions}
@example
"atan2", "cos", "sin", "exp", "abs", "log", "sqrt",
@end example


If abs is unavailable, it can be autogenerated using methods
for "<" or "<=>" combined with either unary minus or subtraction.

@item @emph{Boolean, string and numeric conversion}
@example
"bool", "\"\"", "0+",
@end example


If one or two of these operations are unavailable, the remaining ones can
be used instead.  @code{bool} is used in the flow control operators
(like @code{while}) and for the ternary "@code{?:}" operation.  These functions can
return any arbitrary Perl value.  If the corresponding operation for this value
is overloaded too, that operation will be called again with this value.

@item Special
@example
"nomethod", "fallback", "=",
@end example


see @samp{SPECIAL SYMBOLS FOR @code{use overload}} in this node.

@end itemize
See @samp{"Fallback"} in this node for an explanation of when a missing method can be autogenerated.

@unnumberedsec SPECIAL SYMBOLS FOR @code{use overload}

Three keys are recognized by Perl that are not covered by the above
description.

@unnumberedsubsec Last Resort

@code{"nomethod"} should be followed by a reference to a function of four
parameters.  If defined, it is called when the overloading mechanism
cannot find a method for some operation.  The first three arguments of
this function coincide with the arguments for the corresponding method if
it were found, the fourth argument is the symbol
corresponding to the missing method.  If several methods are tried,
the last one is used.  Say, @code{1-$a} can be equivalent to

@example
&nomethodMethod($a,1,1,"-")
@end example

if the pair @code{"nomethod" => "nomethodMethod"} was specified in the
@code{use overload} directive.

If some operation cannot be resolved, and there is no function
assigned to @code{"nomethod"}, then an exception will be raised via die()--
unless @code{"fallback"} was specified as a key in @code{use overload} directive.

@unnumberedsubsec Fallback 

The key @code{"fallback"} governs what to do if a method for a particular
operation is not found.  Three different cases are possible depending on
the value of @code{"fallback"}:

@itemize @bullet
@item undef

Perl tries to use a
substituted method (see @samp{MAGIC AUTOGENERATION} in this node).  If this fails, it
then tries to calls @code{"nomethod"} value; if missing, an exception
will be raised.

@item TRUE

The same as for the undef value, but no exception is raised.  Instead,
it silently reverts to what it would have done were there no @code{use overload}
present.

@item defined, but FALSE

No autogeneration is tried.  Perl tries to call
@code{"nomethod"} value, and if this is missing, raises an exception. 

@end itemize
@unnumberedsubsec Copy Constructor

The value for @code{"="} is a reference to a function with three
arguments, i.e., it looks like the other values in @code{use
overload}. However, it does not overload the Perl assignment
operator. This would go against Camel hair.

This operation is called in the situations when a mutator is applied
to a reference that shares its object with some other reference, such
as

@example
$a=$b; 
$a++;
@end example

To make this change $a and not change $b, a copy of @code{$$a} is made,
and $a is assigned a reference to this new object.  This operation is
done during execution of the @code{$a++}, and not during the assignment,
(so before the increment @code{$$a} coincides with @code{$$b}).  This is only
done if @code{++} is expressed via a method for @code{@'++@'} or @code{@'+=@'}.  Note
that if this operation is expressed via @code{@'+@'} a nonmutator, i.e., as
in

@example
$a=$b; 
$a=$a+1;
@end example

then @code{$a} does not reference a new copy of @code{$$a}, since $$a does not
appear as lvalue when the above code is executed.

If the copy constructor is required during the execution of some mutator,
but a method for @code{@'=@'} was not specified, it can be autogenerated as a
string copy if the object is a plain scalar.

@table @asis
@item Example
The actually executed code for 

@example
$a=$b; 
        Something else which does not modify $a or $b....
++$a;
@end example

may be

@example
$a=$b; 
        Something else which does not modify $a or $b....
$a = $a->clone(undef,"");
        $a->incr(undef,"");
@end example

if $b was mathemagical, and @code{@'++@'} was overloaded with @code{\&incr},
@code{@'=@'} was overloaded with @code{\&clone}.

@end table
@unnumberedsec MAGIC AUTOGENERATION

If a method for an operation is not found, and the value for  @code{"fallback"} is
TRUE or undefined, Perl tries to autogenerate a substitute method for
the missing operation based on the defined operations.  Autogenerated method
substitutions are possible for the following operations:

@table @asis
@item @emph{Assignment forms of arithmetic operations}
@code{$a+=$b} can use the method for @code{"+"} if the method for @code{"+="}
is not defined.

@item @emph{Conversion operations} 
String, numeric, and boolean conversion are calculated in terms of one
another if not all of them are defined.

@item @emph{Increment and decrement}
The @code{++$a} operation can be expressed in terms of @code{$a+=1} or @code{$a+1},
and @code{$a--} in terms of @code{$a-=1} and @code{$a-1}.

@item @code{abs($a)}
can be expressed in terms of @code{$a<0} and @code{-$a} (or @code{0-$a}).

@item @emph{Unary minus}
can be expressed in terms of subtraction.

@item Negation
! and @code{not} can be expressed in terms of boolean conversion, or
string or numerical conversion.

@item Concatenation
can be expressed in terms of string conversion.

@item @emph{Comparison operations} 
can be expressed in terms of its "spaceship" counterpart: either
@code{<=>} or cmp:

@example
<, >, <=, >=, ==, != 	in terms of <=>
lt, gt, le, ge, eq, ne 	in terms of cmp
@end example

@item @emph{Copy operator}
can be expressed in terms of an assignment to the dereferenced value, if this
value is a scalar and not a reference.

@end table
@unnumberedsec WARNING

The restriction for the comparison operation is that even if, for example,
@`cmp@' should return a blessed reference, the autogenerated @`@code{lt}@'
function will produce only a standard logical value based on the
numerical value of the result of @`cmp@'.  In particular, a working
numeric conversion is needed in this case (possibly expressed in terms of
other conversions).

Similarly, @code{.=}  and @code{x=} operators lose their mathemagical properties
if the string conversion substitution is applied.

When you chop() a mathemagical object it is promoted to a string and its
mathemagical properties are lost.  The same can happen with other
operations as well.

@unnumberedsec Run-time Overloading

Since all use directives are executed at compile-time, the only way to
change overloading during run-time is to

@example
eval @'use overload "+" => \&addmethod@';
@end example

You can also use

@example
eval @'no overload "+", "--", "<="@';
@end example

though the use of these constructs during run-time is questionable.

@unnumberedsec Public functions

Package @code{overload.pm} provides the following public functions:

@table @asis
@item overload::StrVal(arg)
Gives string value of @code{arg} as in absence of stringify overloading.

@item overload::Overloaded(arg)
Returns true if @code{arg} is subject to overloading of some operations.

@item overload::Method(obj,op)
Returns undef or a reference to the method that implements @code{op}.

@end table
@unnumberedsec IMPLEMENTATION

What follows is subject to change RSN.

The table of methods for all operations is cached as magic in the
symbol table hash for the package.  The table is rechecked for changes due to
@code{use overload}, @code{no overload}, and @@ISA only during
blessing; so if they are changed dynamically, you@'ll need an
additional fake blessing to update the table.

(Every SVish thing has a magic queue, and magic is an entry in that queue.
This is how a single variable may participate in multiple forms of magic
simultaneously.  For instance, environment variables regularly have two
forms at once: their %ENV magic and their taint magic.)

If an object belongs to a package using overload, it carries a special
flag.  Thus the only speed penalty during arithmetic operations without
overloading is the checking of this flag.

In fact, if @code{use overload} is not present, there is almost no overhead for
overloadable operations, so most programs should not suffer measurable
performance penalties.  A considerable effort was made to minimize the overhead
when overload is used and the current operation is overloadable but
the arguments in question do not belong to packages using overload.  When
in doubt, test your speed with @code{use overload} and without it.  So far there
have been no reports of substantial speed degradation if Perl is compiled
with optimization turned on.

There is no size penalty for data if overload is not used. 

Copying (@code{$a=$b}) is shallow; however, a one-level-deep copying is 
carried out before any operation that can imply an assignment to the
object $a (or $b) refers to, like @code{$a++}.  You can override this
behavior by defining your own copy constructor (see @samp{"Copy Constructor"} in this node).

It is expected that arguments to methods that are not explicitly supposed
to be changed are constant (but this is not enforced).

@unnumberedsec AUTHOR

Ilya Zakharevich <@file{ilya@@math.mps.ohio-state.edu}>.

@unnumberedsec DIAGNOSTICS

When Perl is run with the @strong{-Do} switch or its equivalent, overloading
induces diagnostic messages.

@unnumberedsec BUGS

Because it is used for overloading, the per-package associative array
%OVERLOAD now has a special meaning in Perl.

As shipped, mathemagical properties are not inherited via the @@ISA tree.

This document is confusing.

