@node Time/JulianDay, Time/Local, Time/HiRes, Module List
@unnumbered Julian calendar manipulations


@unnumberedsec NAME

Time::JulianDay -- Julian calendar manipulations

@unnumberedsec SYNOPSIS

@example
use Time::JulianDay
@end example

@example
$jd = julian_day($year, $month_1_to_12, $day)
$jd = local_julian_day($seconds_since_1970);
$jd = gm_julian_day($seconds_since_1970);
($year, $month_1_to_12, $day) = inverse_julian_day($jd)
$dow = day_of_week($jd) 
@end example

@example
print (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[$dow];
@end example

@example
$seconds_since_jan_1_1970 = jd_secondslocal($jd, $hour, $min, $sec)
$seconds_since_jan_1_1970 = jd_secondsgm($jd, $hour, $min, $sec)
$seconds_since_jan_1_1970 = jd_timelocal($sec,$min,$hours,$mday,$month_0_to_11,$year)
$seconds_since_jan_1_1970 = jd_timegm($sec,$min,$hours,$mday,$month_0_to_11,$year)
@end example

@unnumberedsec DESCRIPTION

JulianDay is a package that manipulates dates as number of days since 
some time a long time ago.  It@'s easy to add and subtract time
using julian days...  

The day_of_week returned by day_of_week() is 0 for Sunday, and 6 for
Saturday and everything else is in between.

@unnumberedsec GENESIS

Written by David Muir Sharnoff <muir@@idiom.com> with help from
previous work by 
Kurt Jaeger aka PI <zrzr0111@@helpdesk.rus.uni-stuttgart.de>
 	based on postings from: Ian Miller <ian_m@@cix.compulink.co.uk>;
Gary Puckering <garyp%cognos.uucp@@uunet.uu.net>
	based on Collected Algorithms of the ACM ?;
and the unknown-to-me author of Time::Local.
