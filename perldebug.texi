@node perldebug, perldiag, perlipc, Top
@unnumbered Perl debugging


@unnumberedsec NAME

perldebug - Perl debugging

@unnumberedsec DESCRIPTION

First of all, have you tried using the -w switch?

@unnumberedsec The Perl Debugger

If you invoke Perl with the -d switch, your script runs under the
Perl source debugger.  This works like an interactive Perl
environment, prompting for debugger commands that let you examine
source code, set breakpoints, get stack backtraces, change the values of
variables, etc.  This is so convenient that you often fire up
the debugger all by itself just to test out Perl constructs 
interactively to see what they do.  For example:

@example
perl -d -e 42
@end example

In Perl, the debugger is not a separate program as it usually is in the
typical compiled environment.  Instead, the -d flag tells the compiler
to insert source information into the parse trees it@'s about to hand off
to the interpreter.  That means your code must first compile correctly
for the debugger to work on it.  Then when the interpreter starts up, it
pre-loads a Perl library file containing the debugger itself.  

The program will halt @emph{right before} the first run-time executable
statement (but see below regarding compile-time statements) and ask you
to enter a debugger command.  Contrary to popular expectations, whenever
the debugger halts and shows you a line of code, it always displays the
line it@'s @emph{about} to execute, rather than the one it has just executed.

Any command not recognized by the debugger is directly executed
(eval@'d) as Perl code in the current package.  (The debugger uses the
DB package for its own state information.)

Leading white space before a command would cause the debugger to think
it@'s @emph{NOT} a debugger command but for Perl, so be careful not to do
that.

@unnumberedsubsec Debugger Commands

The debugger understands the following commands:

@table @asis
@item h [command]
Prints out a help message.  

If you supply another debugger command as an argument to the h command,
it prints out the description for just that command.  The special
argument of @code{h h} produces a more compact help listing, designed to fit
together on one screen.

If the output the h command (or any command, for that matter) scrolls
past your screen, either precede the command with a leading pipe symbol so
it@'s run through your pager, as in

@example
DB> |h
@end example

@item p expr
Same as @code{print DB::OUT expr} in the current package.  In particular,
since this is just Perl@'s own print function, this means that nested
data structures and objects are not dumped, unlike with the x command.

@item x expr
Evals its expression in list context and dumps out the result 
in a pretty-printed fashion.  Nested data structures are printed out
recursively, unlike the print function.

@item V [pkg [vars]]
Display all (or some) variables in package (defaulting to the @code{main}
package) using a data pretty-printer (hashes show their keys and values so
you see what@'s what, control characters are made printable, etc.).  Make
sure you don@'t put the type specifier (like @code{$}) there, just the symbol
names, like this:

@example
V DB filename line
@end example

Use @code{~pattern} and @code{!pattern} for positive and negative regexps.

Nested data structures are printed out in a legible fashion, unlike
the print function.

@item X [vars]
Same as @code{V currentpackage [vars]}.

@item T
Produce a stack backtrace.  See below for details on its output.

@item s [expr]
Single step.  Executes until it reaches the beginning of another
statement, descending into subroutine calls.  If an expression is
supplied that includes function calls, it too will be single-stepped.

@item n
Next.  Executes over subroutine calls, until it reaches the beginning
of the next statement.

@item <CR>
Repeat last n or s command.

@item c [line]
Continue, optionally inserting a one-time-only breakpoint
at the specified line.

@item l
List next window of lines.

@item l min+incr
List @code{incr+1} lines starting at min.

@item l min-max
List lines min through max.

@item l line
List a single line.

@item l subname
List first window of lines from subroutine.

@item -
List previous window of lines.

@item w [line]
List window (a few lines) around the current line.

@item .
Return debugger pointer to the last-executed line and
print it out.

@item f filename
Switch to viewing a different file.

@item /pattern/
Search forwards for pattern; final / is optional.

@item ?pattern?
Search backwards for pattern; final ? is optional.

@item L
List all breakpoints and actions for the current file.

@item S [[!]pattern]
List subroutine names [not] matching pattern.

@item t
Toggle trace mode.

@item t expr
Trace through execution of expr.  For example:

@example
$ perl -de 42
Stack dump during die enabled outside of evals.
@end example

@example
Loading DB routines from perl5db.pl patch level 0.94
Emacs support available.
@end example

@example
Enter h or @`h h@' for help.
@end example

@example
main::(-e:1):   0
  DB<1> sub foo @{ 14 @}
@end example

@example
DB<2> sub bar @{ 3 @}
@end example

@example
DB<3> t print foo() * bar()
 main::((eval 172):3):   print foo() + bar();
 main::foo((eval 168):2):
 main::bar((eval 170):2):
 42
DB<4> q
@end example

@item b [line] [condition]
Set a breakpoint.  If line is omitted, sets a breakpoint on the line
that is about to be executed.  If a condition is specified, it@'s
evaluated each time the statement is reached and a breakpoint is taken
only if the condition is true.  Breakpoints may only be set on lines
that begin an executable statement.  Conditions don@'t use @strong{if}:

@example
b 237 $x > 30
b 33 /pattern/i
@end example

@item b subname [condition]
Set a breakpoint at the first line of the named subroutine.

@item d [line]
Delete a breakpoint at the specified line.  If line is omitted, deletes
the breakpoint on the line that is about to be executed.

@item D
Delete all installed breakpoints.

@item a [line] command
Set an action to be done before the line is executed.
The sequence of steps taken by the debugger is

@enumerate
@item 
check for a breakpoint at this line

@item 
print the line if necessary (tracing)

@item 
do any actions associated with that line

@item 
prompt user if at a breakpoint or in single-step

@item 
evaluate line

@end enumerate
For example, this will print out @code{$foo} every time line
53 is passed:

@example
a 53 print "DB FOUND $foo\n"
@end example

@item A
Delete all installed actions.

@item O [opt[=val]] [opt"val"] [opt?]...
Set or query values of options.  val defaults to 1.  opt can
be abbreviated.  Several options can be listed.

@table @asis
@item recallCommand, ShellBang
The characters used to recall command or spawn shell.  By
default, these are both set to !.

@item pager
Program to use for output of pager-piped commands (those
beginning with a @code{|} character.)  By default,
@code{$ENV@{PAGER@}} will be used.

@end table
The following options affect what happens with V, X, and x
commands:

@table @asis
@item arrayDepth, hashDepth
Print only first N elements (@'@' for all).

@item compactDump, veryCompact
Change style of array and hash dump.

@item globPrint
Whether to print contents of globs.

@item DumpDBFiles
Dump arrays holding debugged files.

@item DumpPackages
Dump symbol tables of packages.

@item quote, HighBit, undefPrint
Change style of string dump.

@item tkRunning
Run Tk while prompting (with ReadLine).

@item signalLevel, warnLevel. dieLevel
Level of verbosity.

@end table
The option @code{PrintRet} affects printing of return value after @code{r}
command, The option @code{frame} affects printing messages on entry and exit
from subroutines.  If @code{frame} is 1, messages are printed on entry only;
if it@'s set to more than that, they@'ll will be printed on exit as well,
which may be useful if interdispersed with other messages.

During startup options are initialized from $ENV@{PERLDB_OPTS@}.
You can put additional initialization options TTY, noTTY,
ReadLine, and NonStop there.   Here@'s an example of using
the @code{$ENV@{PERLDB_OPTS@}} variable:

@example
$ PERLDB_OPTS="N f=2" perl -d myprogram
@end example

will run the script @code{myprogram} without human intervention, printing
out the call tree with entry and exit points.  Note that @code{N f=2} is
equivalent to @code{NonStop=1 frame=2}. Note also that at the moment when
this documentation was written all the options to the debugger could
be uniquely abbreviated by the first letter.

See "Debugger Internals" below for more details.

@item < command
Set an action to happen before every debugger prompt.  A multiline
command may be entered by backslashing the newlines.

@item > command
Set an action to happen after the prompt when you@'ve just given a
command to return to executing the script.  A multiline command may be
entered by backslashing the newlines.

@item ! number
Redo a previous command (default previous command).

@item ! -number
Redo number@'th-to-last command.

@item ! pattern
Redo last command that started with pattern.
See @code{O recallCommand}, too.

@item !! cmd
Run cmd in a subprocess (reads from DB::IN, writes to DB::OUT)
See @code{O shellBang} too.

@item H -number
Display last n commands.  Only commands longer than one character are
listed.  If number is omitted, lists them all.

@item q or ^D
Quit.  ("quit" doesn@'t work for this.)

@item R
Restart the debugger by execing a new session.  It tries to maintain
your history across this, but internal settings and command line options
may be lost.

@item |dbcmd
Run debugger command, piping DB::OUT to current pager.

@item ||dbcmd
Same as |dbcmd but DB::OUT is temporarily selected as well.
Often used with commands that would otherwise produce long
output, such as

@example
|V main
@end example

@item = [alias value]
Define a command alias, or list current aliases.

@item command
Execute command as a Perl statement.  A missing semicolon will be
supplied.

@item p expr
Same as @code{print DB::OUT expr}.  The DB::OUT filehandle is opened to
/dev/tty, regardless of where STDOUT may be redirected to.

@end table
The debugger prompt is something like

@example
DB<8>
@end example

or even

@example
DB<<17>>
@end example

where that number is the command number, which you@'d use to access with
the built-in @strong{csh}-like history mechanism, e.g. @code{!17} would repeat
command number 17.  The number of angle brackets indicates the depth of
the debugger.  You could get more than one set of brackets, for example, if
you@'d already at a breakpoint and then printed out the result of a
function call that itself also has a breakpoint.

If you want to enter a multi-line command, such as a subroutine
definition with several statements, you may escape the newline that would
normally end the debugger command with a backslash.  Here@'s an example:

@example
DB<1> for (1..4) @{         \
cont:     print "ok\n";   \
cont: @}
ok
ok
ok
ok
@end example

Note that this business of escaping a newline is specific to interactive
commands typed into the debugger.

Here@'s an example of what a stack backtrace might look like:

@example
$ = main::infested called from file @`Ambulation.pm@' line 10
@@ = Ambulation::legs(1, 2, 3, 4) called from file @`camel_flea@' line 7
$ = main::pests(@'bactrian@', 4) called from file @`camel_flea@' line 4
@end example

The left-hand character up there tells whether the function was called
in a scalar or list context (we bet you can tell which is which).  What
that says is that you were in the function @code{main::infested} when you ran
the stack dump, and that it was called in a scalar context from line 10
of the file @emph{Ambulation.pm}, but without any arguments at all, meaning
it was called as @code{&infested}.  The next stack frame shows that the
function @code{Ambulation::legs} was called in a list context from the
@emph{camel_flea} file with four arguments.  The last stack frame shows that
@code{main::pests} was called in a scalar context, also from @emph{camel_flea},
but from line 4.

If you have any compile-time executable statements (code within a BEGIN
block or a use statement), these will @code{NOT} be stopped by debugger,
although requires will.  From your own Perl code, however, you can
transfer control back to the debugger using the following statement,
which is harmless if the debugger is not running:

@example
$DB::single = 1;
@end example

If you set @code{$DB::single} to the value 2, it@'s equivalent to having
just typed the n command, whereas a value of 1 means the s
command.  The @code{$DB::trace}  variable should be set to 1 to simulate
having typed the t command.

@unnumberedsubsec Debugger Customization

If you want to modify the debugger, copy @file{perl5db.pl} from the Perl
library to another name and modify it as necessary.  You@'ll also want
to set your PERL5DB environment variable to say something like this:

@example
BEGIN @{ require "myperl5db.pl" @}
@end example

You can do some customization by setting up a @file{.perldb} file which
contains initialization code.  For instance, you could make aliases
like these (the last one is one people expect to be there):

@example
$DB::alias@{@'len@'@}  = @'s/^len(.*)/p length($1)/@';
$DB::alias@{@'stop@'@} = @'s/^stop (at|in)/b/@';
$DB::alias@{@'ps@'@}   = @'s/^ps\b/p scalar /@';
$DB::alias@{@'quit@'@} = @'s/^quit(\s*)/exit\$/@';
@end example

@unnumberedsubsec Readline Support

As shipped, the only command line history supplied is a simplistic one
that checks for leading exclamation points.  However, if you install
the Term::ReadKey and Term::ReadLine modules from CPAN, you will
have full editing capabilities much like GNU @emph{readline}(3) provides.
Look for these in the @file{modules/by-module/Term} directory on CPAN.

@unnumberedsubsec Editor Support for Debugging

If you have GNU @strong{emacs} installed on your system, it can interact with
the Perl debugger to provide an integrated software development
environment reminiscent of its interactions with C debuggers.

Perl is also delivered with a start file for making @strong{emacs} act like a
syntax-directed editor that understands (some of) Perl@'s syntax.  Look in
the @emph{emacs} directory of the Perl source distribution.

(Historically, a similar setup for interacting with @strong{vi} and the
X11 window system had also been available, but at the time of this
writing, no debugger support for @strong{vi} currently exists.)

@unnumberedsubsec The Perl Profiler

If you wish to supply an alternative debugger for Perl to run, just
invoke your script with a colon and a package argument given to the -d
flag.  One of the most popular alternative debuggers for Perl is
@strong{DProf}, the Perl profiler.   As of this writing, @strong{DProf} is not
included with the standard Perl distribution, but it is expected to
be included soon, for certain values of "soon".

Meanwhile, you can fetch the Devel::Dprof module from CPAN.  Assuming
it@'s properly installed on your system, to profile your Perl program in
the file @file{mycode.pl}, just type:

@example
perl -d:DProf mycode.pl
@end example

When the script terminates the profiler will dump the profile information
to a file called @file{tmon.out}.  A tool like @strong{dprofpp} (also supplied with
the Devel::DProf package) can be used to interpret the information which is
in that profile.

@unnumberedsubsec Debugger Internals

When you call the caller function from package DB, Perl sets the
@code{@@DB::args} array to contain the arguments that stack frame was called
with.  It also maintains other magical internal variables, such as
@code{@@DB::dbline}, an array of the source code lines for the currently
selected (with the debugger@'s f command) file.  Perl effectively
inserts a call to the function @code{DB::DB}(@emph{linenum}) in front of every
place that can have a breakpoint. Instead of a subroutine call it calls
@code{DB::sub} setting @code{$DB::sub} being the called subroutine. It also
inserts a @code{BEGIN @{require @'perl5db.pl@'@}} before the first line.

Note that no subroutine call is possible until @code{&DB::sub} is defined
(for subroutines defined outside this file).  In fact, the same is
true if @code{$DB::deep} (how many levels of recursion deep into the
debugger you are) is not defined.

At the start, the debugger reads your rc file (@file{./.perldb} or
@file{~/.perldb} under UNIX), which can set important options.  This file may
define a subroutine @code{&afterinit} to be executed after the debugger is
initialized.

After the  rc file is read, the debugger reads environment variable
PERLDB_OPTS and parses it as a rest of @code{O ...} line in debugger prompt.

The following options can only be specified at startup.  To set them in
your rc file, call @code{&parse_options("optionName=new_value")}.

@table @asis
@item TTY
The TTY to use for debugging I/O.

@item noTTY
If set, goes in NonStop mode.  On interrupt if TTY is not set uses the
value of noTTY or "/tmp/perldbtty$$" to find TTY using
@code{Term::Rendezvous}.  Current variant is to have the name of TTY in this
file.

@item ReadLine
If false, dummy ReadLine is used, so you can debug
ReadLine applications.

@item NonStop
If true, no I/O is performed until an interrupt.

@item LineInfo
File or pipe to print line number info to.  If it is a
pipe, then a short, "emacs like" message is used.

Example rc file:

@example
&parse_options("NonStop=1 LineInfo=db.out");
sub afterinit @{ $trace = 1; @}
@end example

The script will run without human intervention, putting trace information
into the file @emph{db.out}.  (If you interrupt it, you would better reset
LineInfo to something "interactive"!)

@end table
@unnumberedsubsec Other resources

You did try the -w switch, didn@'t you?

@unnumberedsec BUGS

If your program exit()s or die()s, so too does the debugger.

You cannot get the stack frame information or otherwise debug functions
that were not compiled by Perl, such as C or C++ extensions.

If you alter your @@_ arguments in a subroutine (such as with shift
or pop, the stack backtrace will not show the original values.

