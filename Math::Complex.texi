@node Math/Complex, Math/DVector, Math/Brent, Module List
@unnumbered complex numbers and associated mathematical functions


@unnumberedsec NAME

Math::Complex - complex numbers and associated mathematical functions

@unnumberedsec SYNOPSIS

@example
use Math::Complex;
$z = Math::Complex->make(5, 6);
$t = 4 - 3*i + $z;
$j = cplxe(1, 2*pi/3);
@end example

@unnumberedsec DESCRIPTION

This package lets you create and manipulate complex numbers. By default,
Perl limits itself to real numbers, but an extra use statement brings
full complex support, along with a full set of mathematical functions
typically associated with and/or extended to complex numbers.

If you wonder what complex numbers are, they were invented to be able to solve
the following equation:

@example
x*x = -1
@end example

and by definition, the solution is noted @emph{i} (engineers use @emph{j} instead since
@emph{i} usually denotes an intensity, but the name does not matter). The number
@emph{i} is a pure @emph{imaginary} number.

The arithmetics with pure imaginary numbers works just like you would expect
it with real numbers... you just have to remember that

@example
i*i = -1
@end example

so you have:

@example
5i + 7i = i * (5 + 7) = 12i
4i - 3i = i * (4 - 3) = i
4i * 2i = -8
6i / 2i = 3
1 / i = -i
@end example

Complex numbers are numbers that have both a real part and an imaginary
part, and are usually noted:

@example
a + bi
@end example

where a is the @emph{real} part and b is the @emph{imaginary} part. The
arithmetic with complex numbers is straightforward. You have to
keep track of the real and the imaginary parts, but otherwise the
rules used for real numbers just apply:

@example
(4 + 3i) + (5 - 2i) = (4 + 5) + i(3 - 2) = 9 + i
(2 + i) * (4 - i) = 2*4 + 4i -2i -i*i = 8 + 2i + 1 = 9 + 2i
@end example

A graphical representation of complex numbers is possible in a plane
(also called the @emph{complex plane}, but it@'s really a 2D plane).
The number

@example
z = a + bi
@end example

is the point whose coordinates are (a, b). Actually, it would
be the vector originating from (0, 0) to (a, b). It follows that the addition
of two complex numbers is a vectorial addition.

Since there is a bijection between a point in the 2D plane and a complex
number (i.e. the mapping is unique and reciprocal), a complex number
can also be uniquely identified with polar coordinates:

@example
[rho, theta]
@end example

where @code{rho} is the distance to the origin, and @code{theta} the angle between
the vector and the x axis. There is a notation for this using the
exponential form, which is:

@example
rho * exp(i * theta)
@end example

where @emph{i} is the famous imaginary number introduced above. Conversion
between this form and the cartesian form @code{a + bi} is immediate:

@example
a = rho * cos(theta)
b = rho * sin(theta)
@end example

which is also expressed by this formula:

@example
z = rho * exp(i * theta) = rho * (cos theta + i * sin theta) 
@end example

In other words, it@'s the projection of the vector onto the x and @emph{y}
axes. Mathematicians call @emph{rho} the @emph{norm} or @emph{modulus} and @emph{theta}
the @emph{argument} of the complex number. The @emph{norm} of @code{z} will be
noted @code{abs(z)}.

The polar notation (also known as the trigonometric
representation) is much more handy for performing multiplications and
divisions of complex numbers, whilst the cartesian notation is better
suited for additions and substractions. Real numbers are on the x
axis, and therefore @emph{theta} is zero.

All the common operations that can be performed on a real number have
been defined to work on complex numbers as well, and are merely
@emph{extensions} of the operations defined on real numbers. This means
they keep their natural meaning when there is no imaginary part, provided
the number is within their definition set.

For instance, the sqrt routine which computes the square root of
its argument is only defined for positive real numbers and yields a
positive real number (it is an application from @strong{R+} to @strong{R+}).
If we allow it to return a complex number, then it can be extended to
negative real numbers to become an application from R to C (the
set of complex numbers):

@example
sqrt(x) = x >= 0 ? sqrt(x) : sqrt(-x)*i
@end example

It can also be extended to be an application from C to C,
whilst its restriction to R behaves as defined above by using
the following definition:

@example
sqrt(z = [r,t]) = sqrt(r) * exp(i * t/2)
@end example

Indeed, a negative real number can be noted @code{[x,pi]}
(the modulus x is always positive, so @code{[x,pi]} is really -x, a
negative number)
and the above definition states that

@example
sqrt([x,pi]) = sqrt(x) * exp(i*pi/2) = [sqrt(x),pi/2] = sqrt(x)*i
@end example

which is exactly what we had defined for negative real numbers above.

All the common mathematical functions defined on real numbers that
are extended to complex numbers share that same property of working
@emph{as usual} when the imaginary part is zero (otherwise, it would not
be called an extension, would it?).

A new operation possible on a complex number that is
the identity for real numbers is called the @emph{conjugate}, and is noted
with an horizontal bar above the number, or @code{~z} here.

@example
z = a + bi
	~z = a - bi
@end example

Simple... Now look:

@example
z * ~z = (a + bi) * (a - bi) = a*a + b*b
@end example

We saw that the norm of @code{z} was noted @code{abs(z)} and was defined as the
distance to the origin, also known as:

@example
rho = abs(z) = sqrt(a*a + b*b)
@end example

so

@example
z * ~z = abs(z) ** 2
@end example

If z is a pure real number (i.e. @code{b == 0}), then the above yields:

@example
a * a = abs(a) ** 2
@end example

which is true (abs has the regular meaning for real number, i.e. stands
for the absolute value). This example explains why the norm of @code{z} is
noted @code{abs(z)}: it extends the abs function to complex numbers, yet
is the regular abs we know when the complex number actually has no
imaginary part... This justifies @emph{a posteriori} our use of the abs
notation for the norm.

@unnumberedsec OPERATIONS

Given the following notations:

@example
z1 = a + bi = r1 * exp(i * t1)
z2 = c + di = r2 * exp(i * t2)
z = <any complex or real number>
@end example

the following (overloaded) operations are supported on complex numbers:

@example
z1 + z2 = (a + c) + i(b + d)
z1 - z2 = (a - c) + i(b - d)
z1 * z2 = (r1 * r2) * exp(i * (t1 + t2))
z1 / z2 = (r1 / r2) * exp(i * (t1 - t2))
z1 ** z2 = exp(z2 * log z1)
~z1 = a - bi
abs(z1) = r1 = sqrt(a*a + b*b)
sqrt(z1) = sqrt(r1) * exp(i * t1/2)
exp(z1) = exp(a) * exp(i * b)
log(z1) = log(r1) + i*t1
sin(z1) = 1/2i (exp(i * z1) - exp(-i * z1))
cos(z1) = 1/2 (exp(i * z1) + exp(-i * z1))
abs(z1) = r1
atan2(z1, z2) = atan(z1/z2)
@end example

The following extra operations are supported on both real and complex
numbers:

@example
Re(z) = a
Im(z) = b
arg(z) = t
@end example

@example
cbrt(z) = z ** (1/3)
log10(z) = log(z) / log(10)
logn(z, n) = log(z) / log(n)
@end example

@example
tan(z) = sin(z) / cos(z)
cotan(z) = 1 / tan(z)
@end example

@example
asin(z) = -i * log(i*z + sqrt(1-z*z))
acos(z) = -i * log(z + sqrt(z*z-1))
atan(z) = i/2 * log((i+z) / (i-z))
acotan(z) = -i/2 * log((i+z) / (z-i))
@end example

@example
sinh(z) = 1/2 (exp(z) - exp(-z))
cosh(z) = 1/2 (exp(z) + exp(-z))
tanh(z) = sinh(z) / cosh(z)
cotanh(z) = 1 / tanh(z)

asinh(z) = log(z + sqrt(z*z+1))
acosh(z) = log(z + sqrt(z*z-1))
atanh(z) = 1/2 * log((1+z) / (1-z))
acotanh(z) = 1/2 * log((1+z) / (z-1))
@end example

The root function is available to compute all the nth
roots of some complex, where n is a strictly positive integer.
There are exactly n such roots, returned as a list. Getting the
number mathematicians call @code{j} such that:

@example
1 + j + j*j = 0;
@end example

is a simple matter of writing:

@example
$j = ((root(1, 3))[1];
@end example

The @emph{k}th root for @code{z = [r,t]} is given by:

@example
(root(z, n))[k] = r**(1/n) * exp(i * (t + 2*k*pi)/n)
@end example

The @emph{spaceshift} operation is also defined. In order to ensure its
restriction to real numbers is conform to what you would expect, the
comparison is run on the real part of the complex number first,
and imaginary parts are compared only when the real parts match. 

@unnumberedsec CREATION

To create a complex number, use either:

@example
$z = Math::Complex->make(3, 4);
$z = cplx(3, 4);
@end example

if you know the cartesian form of the number, or

@example
$z = 3 + 4*i;
@end example

if you like. To create a number using the trigonometric form, use either:

@example
$z = Math::Complex->emake(5, pi/3);
$x = cplxe(5, pi/3);
@end example

instead. The first argument is the modulus, the second is the angle (in radians).
(Mnmemonic: @code{e} is used as a notation for complex numbers in the trigonometric
form).

It is possible to write:

@example
$x = cplxe(-3, pi/4);
@end example

but that will be silently converted into @code{[3,-3pi/4]}, since the modulus
must be positive (it represents the distance to the origin in the complex
plane).

@unnumberedsec STRINGIFICATION

When printed, a complex number is usually shown under its cartesian
form @emph{a+bi}, but there are legitimate cases where the polar format
@emph{[r,t]} is more appropriate.

By calling the routine @code{Math::Complex::display_format} and supplying either
@code{"polar"} or @code{"cartesian"}, you override the default display format,
which is @code{"cartesian"}. Not supplying any argument returns the current
setting.

This default can be overridden on a per-number basis by calling the
@code{display_format} method instead. As before, not supplying any argument
returns the current display format for this number. Otherwise whatever you
specify will be the new display format for @emph{this} particular number.

For instance:

@example
use Math::Complex;
@end example

@example
Math::Complex::display_format(@'polar@');
$j = ((root(1, 3))[1];
print "j = $j\n";		# Prints "j = [1,2pi/3]
$j->display_format(@'cartesian@');
print "j = $j\n";		# Prints "j = -0.5+0.866025403784439i"
@end example

The polar format attempts to emphasize arguments like @emph{k*pi/n}
(where n is a positive integer and @emph{k} an integer within [-9,+9]).

@unnumberedsec USAGE

Thanks to overloading, the handling of arithmetics with complex numbers
is simple and almost transparent.

Here are some examples:

@example
use Math::Complex;
@end example

@example
$j = cplxe(1, 2*pi/3);	# $j ** 3 == 1
print "j = $j, j**3 = ", $j ** 3, "\n";
print "1 + j + j**2 = ", 1 + $j + $j**2, "\n";
@end example

@example
$z = -16 + 0*i;			# Force it to be a complex
print "sqrt($z) = ", sqrt($z), "\n";
@end example

@example
$k = exp(i * 2*pi/3);
print "$j - $k = ", $j - $k, "\n";
@end example

@unnumberedsec BUGS

Saying @code{use Math::Complex;} exports many mathematical routines in the caller
environment.  This is construed as a feature by the Author, actually... ;-)

The code is not optimized for speed, although we try to use the cartesian
form for addition-like operators and the trigonometric form for all
multiplication-like operators.

The arg() routine does not ensure the angle is within the range [-pi,+pi]
(a side effect caused by multiplication and division using the trigonometric
representation).

All routines expect to be given real or complex numbers. Don@'t attempt to
use BigFloat, since Perl has currently no rule to disambiguate a @'+@'
operation (for instance) between two overloaded entities.

@unnumberedsec AUTHOR

Raphael Manfredi <@file{Raphael_Manfredi@@grenoble.hp.com}>
