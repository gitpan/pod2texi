@node CGI, CGI/Base, C/Scan, Module List
@unnumbered Simple Common Gateway Interface Class


@unnumberedsec NAME

CGI - Simple Common Gateway Interface Class

@unnumberedsec ABSTRACT

This perl library uses perl5 objects to make it easy to create
Web fill-out forms and parse their contents.  This package
defines CGI objects, entities that contain the values of the
current query string and other state variables.
Using a CGI object@'s methods, you can examine keywords and parameters
passed to your script, and create forms whose initial values
are taken from the current query (thereby preserving state
information).

The current version of CGI.pm is available at

@example
http://www-genome.wi.mit.edu/ftp/pub/software/WWW/cgi_docs.html
ftp://ftp-genome.wi.mit.edu/pub/software/WWW/
@end example

@unnumberedsec INSTALLATION:

To install this package, just change to the directory in which this
file is found and type the following:

@example
perl Makefile.PL
make
make install
@end example

This will copy CGI.pm to your perl library directory for use by all
perl scripts.  You probably must be root to do this.   Now you can
load the CGI routines in your Perl scripts with the line:

@example
use CGI;
@end example

If you don@'t have sufficient privileges to install CGI.pm in the Perl
library directory, you can put CGI.pm into some convenient spot, such
as your home directory, or in cgi-bin itself and prefix all Perl
scripts that call it with something along the lines of the following
preamble:

@example
BEGIN @{
	unshift(@@INC,@'/home/davis/lib@');
@}
use CGI;
@end example

The CGI distribution also comes with a cute module called @xref{CGI/Carp,CGI/Carp},.
It redefines the die(), warn(), confess() and croak() error routines
so that they write nicely formatted error messages into the server@'s
error log (or to the output stream of your choice).  This avoids long
hours of groping through the error and access logs, trying to figure
out which CGI script is generating  error messages.  If you choose,
you can even have fatal error messages echoed to the browser to avoid
the annoying and uninformative "Server Error" message.

@unnumberedsec DESCRIPTION

@unnumberedsubsec CREATING A NEW QUERY OBJECT:

@example
$query = new CGI;
@end example

This will parse the input (from both POST and GET methods) and store
it into a perl5 object called $query.  

@unnumberedsubsec CREATING A NEW QUERY OBJECT FROM AN INPUT FILE

@example
$query = new CGI(INPUTFILE);
@end example

If you provide a file handle to the new() method, it
will read parameters from the file (or STDIN, or whatever).  The
file can be in any of the forms describing below under debugging
(i.e. a series of newline delimited TAG=VALUE pairs will work).
Conveniently, this type of file is created by the save() method
(see below).  Multiple records can be saved and restored.

Perl purists will be pleased to know that this syntax accepts
references to file handles, or even references to filehandle globs,
which is the "official" way to pass a filehandle:

@example
$query = new CGI(\*STDIN);
@end example

You can also initialize the query object from an associative array
reference:

@example
$query = new CGI( @{@'dinosaur@'=>@'barney@',
		       @'song@'=>@'I love you@',
		       @'friends@'=>[qw/Jessica George Nancy/]@}
                );
@end example

or from a properly formatted, URL-escaped query string:

@example
$query = new CGI(@'dinosaur=barney&color=purple@');
@end example

To create an empty query, initialize it from an empty string or hash:

@example
$empty_query = new CGI("");
             -or-
        $empty_query = new CGI(@{@});
@end example

@unnumberedsubsec FETCHING A LIST OF KEYWORDS FROM THE QUERY:

@example
@@keywords = $query->keywords
@end example

If the script was invoked as the result of an <ISINDEX> search, the
parsed keywords can be obtained as an array using the keywords() method.

@unnumberedsubsec FETCHING THE NAMES OF ALL THE PARAMETERS PASSED TO YOUR SCRIPT:

@example
@@names = $query->param
@end example

If the script was invoked with a parameter list
(e.g. "name1=value1&name2=value2&name3=value3"), the param()
method will return the parameter names as a list.  If the
script was invoked as an <ISINDEX> script, there will be a
single parameter named @'keywords@'.

NOTE: As of version 1.5, the array of parameter names returned will
be in the same order as they were submitted by the browser.
Usually this order is the same as the order in which the 
parameters are defined in the form (however, this isn@'t part
of the spec, and so isn@'t guaranteed).

@unnumberedsubsec FETCHING THE VALUE OR VALUES OF A SINGLE NAMED PARAMETER:

@example
@@values = $query->param(@'foo@');
@end example

@example
-or-
@end example

@example
$value = $query->param(@'foo@');
@end example

Pass the param() method a single argument to fetch the value of the
named parameter. If the parameter is multivalued (e.g. from multiple
selections in a scrolling list), you can ask to receive an array.  Otherwise
the method will return a single value.

@unnumberedsubsec SETTING THE VALUE(S) OF A NAMED PARAMETER:

@example
$query->param(@'foo@',@'an@',@'array@',@'of@',@'values@');
@end example

This sets the value for the named parameter @'foo@' to an array of
values.  This is one way to change the value of a field AFTER
the script has been invoked once before.  (Another way is with
the -override parameter accepted by all methods that generate
form elements.)

param() also recognizes a named parameter style of calling described
in more detail later:

@example
$query->param(-name=>@'foo@',-values=>[@'an@',@'array@',@'of@',@'values@']);
@end example

@example
-or-
@end example

@example
$query->param(-name=>@'foo@',-value=>@'the value@');
@end example

@unnumberedsubsec APPENDING ADDITIONAL VALUES TO A NAMED PARAMETER:

@example
$query->append(-name=>;@'foo@',-values=>[@'yet@',@'more@',@'values@']);
@end example

This adds a value or list of values to the named parameter.  The
values are appended to the end of the parameter if it already exists.
Otherwise the parameter is created.  Note that this method only
recognizes the named argument calling syntax.

@unnumberedsubsec IMPORTING ALL PARAMETERS INTO A NAMESPACE:

@example
$query->import_names(@'R@');
@end example

This creates a series of variables in the @'R@' namespace.  For example,
$R::foo, @@R:foo.  For keyword lists, a variable @@R::keywords will appear.
If no namespace is given, this method will assume @'Q@'.
WARNING:  don@'t import anything into @'main@'; this is a major security
risk!!!!

In older versions, this method was called import().  As of version 2.20, 
this name has been removed completely to avoid conflict with the built-in
Perl module import operator.

@unnumberedsubsec DELETING A PARAMETER COMPLETELY:

@example
$query->delete(@'foo@');
@end example

This completely clears a parameter.  It sometimes useful for
resetting parameters that you don@'t want passed down between
script invocations.

@unnumberedsubsec DELETING ALL PARAMETERS:

$query->delete_all();

This clears the CGI object completely.  It might be useful to ensure
that all the defaults are taken when you create a fill-out form.

@unnumberedsubsec SAVING THE STATE OF THE FORM TO A FILE:

@example
$query->save(FILEHANDLE)
@end example

This will write the current state of the form to the provided
filehandle.  You can read it back in by providing a filehandle
to the new() method.  Note that the filehandle can be a file, a pipe,
or whatever!

The format of the saved file is:

@example
NAME1=VALUE1
NAME1=VALUE1@'
NAME2=VALUE2
NAME3=VALUE3
=
@end example

Both name and value are URL escaped.  Multi-valued CGI parameters are
represented as repeated names.  A session record is delimited by a
single = symbol.  You can write out multiple records and read them
back in with several calls to new.  You can do this across several
sessions by opening the file in append mode, allowing you to create
primitive guest books, or to keep a history of users@' queries.  Here@'s
a short example of creating multiple session records:

@example
use CGI;
@end example

@example
open (OUT,">>test.out") || die;
$records = 5;
foreach (0..$records) @{
    my $q = new CGI;
    $q->param(-name=>@'counter@',-value=>$_);
    $q->save(OUT);
@}
close OUT;
@end example

@example
# reopen for reading
open (IN,"test.out") || die;
while (!eof(IN)) @{
    my $q = new CGI(IN);
    print $q->param(@'counter@'),"\n";
@}
@end example

The file format used for save/restore is identical to that used by the
Whitehead Genome Center@'s data exchange format "Boulderio", and can be
manipulated and even databased using Boulderio utilities.  See
	
  http://www.genome.wi.mit.edu/genome_software/other/boulder.html

for further details.

@unnumberedsubsec CREATING A SELF-REFERENCING URL THAT PRESERVES STATE INFORMATION:

@example
$myself = $query->self_url;
print "<A HREF=$myself>I@'m talking to myself.</A>";
@end example

self_url() will return a URL, that, when selected, will reinvoke
this script with all its state information intact.  This is most
useful when you want to jump around within the document using
internal anchors but you don@'t want to disrupt the current contents
of the form(s).  Something like this will do the trick.

@example
$myself = $query->self_url;
print "<A HREF=$myself#table1>See table 1</A>";
print "<A HREF=$myself#table2>See table 2</A>";
print "<A HREF=$myself#yourself>See for yourself</A>";
@end example

If you don@'t want to get the whole query string, call
the method url() to return just the URL for the script:

@example
$myself = $query->url;
print "<A HREF=$myself>No query string in this baby!</A>\n";
@end example

You can also retrieve the unprocessed query string with query_string():

@example
$the_string = $query->query_string;
@end example

@unnumberedsubsec COMPATIBILITY WITH CGI-LIB.PL

To make it easier to port existing programs that use cgi-lib.pl
the compatibility routine "ReadParse" is provided.  Porting is
simple:

OLD VERSION
    require "cgi-lib.pl";
    &ReadParse;
    print "The value of the antique is $in@{antique@}.\n";

NEW VERSION
    use CGI;
    CGI::ReadParse
    print "The value of the antique is $in@{antique@}.\n";

CGI.pm@'s ReadParse() routine creates a tied variable named %in,
which can be accessed to obtain the query variables.  Like
ReadParse, you can also provide your own variable.  Infrequently
used features of ReadParse, such as the creation of @@in and $in 
variables, are not supported.

Once you use ReadParse, you can retrieve the query object itself
this way:

@example
$q = $in@{CGI@};
print $q->textfield(-name=>@'wow@',
                    -value=>@'does this really work?@');
@end example

This allows you to start using the more interesting features
of CGI.pm without rewriting your old scripts from scratch.

@unnumberedsubsec CALLING CGI FUNCTIONS THAT TAKE MULTIPLE ARGUMENTS

In versions of CGI.pm prior to 2.0, it could get difficult to remember
the proper order of arguments in CGI function calls that accepted five
or six different arguments.  As of 2.0, there@'s a better way to pass
arguments to the various CGI functions.  In this style, you pass a
series of name=>argument pairs, like this:

@example
$field = $query->radio_group(-name=>@'OS@',
                             -values=>[Unix,Windows,Macintosh],
                             -default=>@'Unix@');
@end example

The advantages of this style are that you don@'t have to remember the
exact order of the arguments, and if you leave out a parameter, in
most cases it will default to some reasonable value.  If you provide
a parameter that the method doesn@'t recognize, it will usually do
something useful with it, such as incorporating it into the HTML form
tag.  For example if Netscape decides next week to add a new
JUSTIFICATION parameter to the text field tags, you can start using
the feature without waiting for a new version of CGI.pm:

@example
$field = $query->textfield(-name=>@'State@',
                           -default=>@'gaseous@',
                           -justification=>@'RIGHT@');
@end example

This will result in an HTML tag that looks like this:

@example
<INPUT TYPE="textfield" NAME="State" VALUE="gaseous"
               JUSTIFICATION="RIGHT">
@end example

Parameter names are case insensitive: you can use -name, or -Name or
-NAME.  You don@'t have to use the hyphen if you don@'t want to.  After
creating a CGI object, call the @strong{use_named_parameters()} method with
a nonzero value.  This will tell CGI.pm that you intend to use named
parameters exclusively:

@example
$query = new CGI;
$query->use_named_parameters(1);
$field = $query->radio_group(@'name@'=>@'OS@',
                             @'values@'=>[@'Unix@',@'Windows@',@'Macintosh@'],
                             @'default@'=>@'Unix@');
@end example

Actually, CGI.pm only looks for a hyphen in the first parameter.  So
you can leave it off subsequent parameters if you like.  Something to
be wary of is the potential that a string constant like "values" will
collide with a keyword (and in fact it does!) While Perl usually
figures out when you@'re referring to a function and when you@'re
referring to a string, you probably should put quotation marks around
all string constants just to play it safe.

@unnumberedsubsec CREATING THE HTTP HEADER:

@example
print $query->header;
@end example

@example
-or-
@end example

@example
print $query->header(@'image/gif@');
@end example

@example
-or-
@end example

@example
print $query->header(@'text/html@',@'204 No response@');
@end example

@example
-or-
@end example

@example
print $query->header(-type=>@'image/gif@',
			     -status=>@'402 Payment required@',
			     -expires=>@'+3d@',
			     -cookie=>$cookie,
			     -Cost=>@'$2.00@');
@end example

header() returns the Content-type: header.  You can provide your own
MIME type if you choose, otherwise it defaults to text/html.  An
optional second parameter specifies the status code and a human-readable
message.  For example, you can specify 204, "No response" to create a
script that tells the browser to do nothing at all.  If you want to
add additional fields to the header, just tack them on to the end:

@example
print $query->header(@'text/html@',@'200 OK@',@'Content-Length: 3002@');
@end example

The last example shows the named argument style for passing arguments
to the CGI methods using named parameters.  Recognized parameters are
@strong{-type}, @strong{-status}, @strong{-expires}, and @strong{-cookie}.  Any other 
parameters will be stripped of their initial hyphens and turned into
header fields, allowing you to specify any HTTP header you desire.

Most browsers will not cache the output from CGI scripts.  Every time
the browser reloads the page, the script is invoked anew.  You can
change this behavior with the @strong{-expires} parameter.  When you specify
an absolute or relative expiration interval with this parameter, some
browsers and proxy servers will cache the script@'s output until the
indicated expiration date.  The following forms are all valid for the
-expires field:

@example
+30s                              30 seconds from now
+10m                              ten minutes from now
+1h	                          one hour from now
        -1d                               yesterday (i.e. "ASAP!")
now                               immediately
+3M                               in three months
        +10y                              in ten years time
Thursday, 25-Apr-96 00:40:33 GMT  at the indicated time & date
@end example

(CGI::expires() is the static function call used internally that turns
relative time intervals into HTTP dates.  You can call it directly if
you wish.)

The @strong{-cookie} parameter generates a header that tells the browser to provide
a "magic cookie" during all subsequent transactions with your script.
Netscape cookies have a special format that includes interesting attributes
such as expiration time.  Use the cookie() method to create and retrieve
session cookies.

As of version 1.56, all HTTP headers produced by CGI.pm contain the
Pragma: no-cache instruction.  However, as of version 1.57, this is
turned OFF by default because it causes Netscape 2.0 and higher to
produce an annoying warning message every time the "back" button is
hit.  Turn it on again with the method cache().

@unnumberedsubsec GENERATING A REDIRECTION INSTRUCTION

@example
print $query->redirect(@'http://somewhere.else/in/movie/land@');
@end example

redirects the browser elsewhere.  If you use redirection like this,
you should @strong{not} print out a header as well.  As of version 2.0, we
produce both the unofficial Location: header and the official URI:
header.  This should satisfy most servers and browsers.

One hint I can offer is that relative links may not work correctly
when when you generate a redirection to another document on your site.
This is due to a well-intentioned optimization that some servers use.
The solution to this is to use the full URL (including the http: part)
of the document you are redirecting to.

@unnumberedsubsec CREATING THE HTML HEADER:

@example
print $query->start_html(-title=>@'Secrets of the Pyramids@',
                         -author=>@'fred@@capricorn.org@',
                         -base=>@'true@',
			    -meta=>@{@'keywords@'=>@'pharaoh secret mummy@',
                                 @'copyright@'=>@'copyright 1996 King Tut@'@},
                         -BGCOLOR=>@'blue@');
@end example

@example
-or-
@end example

@example
print $query->start_html(@'Secrets of the Pyramids@',
                         @'fred@@capricorn.org@',@'true@',
                         @'BGCOLOR="blue"@');
@end example

This will return a canned HTML header and the opening <BODY> tag.  
All parameters are optional.   In the named parameter form, recognized
parameters are -title, -author and -base (see below for the
explanation).  Any additional parameters you provide, such as the
Netscape unofficial BGCOLOR attribute, are added to the <BODY> tag.

The argument @strong{-xbase} allows you to provide an HREF for the <BASE> tag
different from the current location, as in

@example
-xbase=>"http://home.mcom.com/"
@end example

All relative links will be interpreted relative to this tag.

You add arbitrary meta information to the header with the @strong{-meta}
argument.  This argument expects a reference to an associative array
containing name/value pairs of meta information.  These will be turned
into a series of header <META> tags that look something like this:

@example
<META NAME="keywords" CONTENT="pharaoh secret mummy">
<META NAME="description" CONTENT="copyright 1996 King Tut">
@end example

There is no support for the HTTP-EQUIV type of <META> tag.  This is
because you can modify the HTTP header directly with the @strong{header()}
method.

JAVASCRIPTING: The @strong{-script}, @strong{-onLoad} and @strong{-onUnload} parameters
are used to add Netscape JavaScript calls to your pages.  @strong{-script}
should point to a block of text containing JavaScript function
definitions.  This block will be placed within a <SCRIPT> block inside
the HTML (not HTTP) header.  The block is placed in the header in
order to give your page a fighting chance of having all its JavaScript
functions in place even if the user presses the stop button before the
page has loaded completely.  CGI.pm attempts to format the script in
such a way that JavaScript-naive browsers will not choke on the code:
unfortunately there are some browsers, such as Chimera for Unix, that
get confused by it nevertheless.

The @strong{-onLoad} and @strong{-onUnload} parameters point to fragments of JavaScript
code to execute when the page is respectively opened and closed by the
browser.  Usually these parameters are calls to functions defined in the
@strong{-script} field:

@example
$query = new CGI;
print $query->header;
$JSCRIPT=<<END;
// Ask a silly question
function riddle_me_this() @{
   var r = prompt("What walks on four legs in the morning, " +
                 "two legs in the afternoon, " +
                 "and three legs in the evening?");
   response(r);
@}
// Get a silly answer
function response(answer) @{
   if (answer == "man")
      alert("Right you are!");
   else
      alert("Wrong!  Guess again.");
@}
END
print $query->start_html(-title=>@'The Riddle of the Sphinx@',
                         -script=>$JSCRIPT);
@end example

See

@example
http://home.netscape.com/eng/mozilla/2.0/handbook/javascript/
@end example

for more information about JavaScript.

The old-style positional parameters are as follows:

@table @asis
@item Parameters:
@item 
The title

@item 
The author@'s e-mail address (will create a <LINK REV="MADE"> tag if present

@item 
A @'true@' flag if you want to include a <BASE> tag in the header.  This
helps resolve relative addresses to absolute ones when the document is moved, 
but makes the document hierarchy non-portable.  Use with care!

@item 5, 6...
Any other parameters you want to include in the <BODY> tag.  This is a good
place to put Netscape extensions, such as colors and wallpaper patterns.

@end table
@unnumberedsubsec ENDING THE HTML DOCUMENT:

@example
print $query->end_html
@end example

This ends an HTML document by printing the </BODY></HTML> tags.

@unnumberedsec CREATING FORMS:

@emph{General note}  The various form-creating methods all return strings
to the caller, containing the tag or tags that will create the requested
form element.  You are responsible for actually printing out these strings.
It@'s set up this way so that you can place formatting tags
around the form elements.

@emph{Another note} The default values that you specify for the forms are only
used the @strong{first} time the script is invoked (when there is no query
string).  On subsequent invocations of the script (when there is a query
string), the former values are used even if they are blank.  

If you want to change the value of a field from its previous value, you have two
choices:

(1) call the param() method to set it.

(2) use the -override (alias -force) parameter (a new feature in version 2.15).
This forces the default value to be used, regardless of the previous value:

@example
print $query->textfield(-name=>@'field_name@',
                        -default=>@'starting value@',
                        -override=>1,
                        -size=>50,
                        -maxlength=>80);
@end example

@emph{Yet another note} By default, the text and labels of form elements are
escaped according to HTML rules.  This means that you can safely use
"<CLICK ME>" as the label for a button.  However, it also interferes with
your ability to incorporate special HTML character sequences, such as &Aacute;,
into your fields.  If you wish to turn off automatic escaping, call the
autoEscape() method with a false value immediately after creating the CGI object:

@example
$query = new CGI;
$query->autoEscape(undef);
			     
@end example

@unnumberedsubsec CREATING AN ISINDEX TAG

@example
print $query->isindex(-action=>$action);
@end example

@example
-or-
@end example

@example
print $query->isindex($action);
@end example

Prints out an <ISINDEX> tag.  Not very exciting.  The parameter
-action specifies the URL of the script to process the query.  The
default is to process the query with the current script.

@unnumberedsubsec STARTING AND ENDING A FORM

@example
print $query->startform(-method=>$method,
	                    -action=>$action,
	                    -encoding=>$encoding);
  <... various form stuff ...>
print $query->endform;
@end example

@example
-or-
@end example

@example
print $query->startform($method,$action,$encoding);
  <... various form stuff ...>
print $query->endform;
@end example

startform() will return a <FORM> tag with the optional method,
action and form encoding that you specify.  The defaults are:
	
    method: POST
    action: this script
    encoding: application/x-www-form-urlencoded

endform() returns the closing </FORM> tag.  

Startform()@'s encoding method tells the browser how to package the various
fields of the form before sending the form to the server.  Two
values are possible:

@table @asis
@item @strong{application/x-www-form-urlencoded}
This is the older type of encoding used by all browsers prior to
Netscape 2.0.  It is compatible with many CGI scripts and is
suitable for short fields containing text data.  For your
convenience, CGI.pm stores the name of this encoding
type in @strong{$CGI::URL_ENCODED}.

@item @strong{multipart/form-data}
This is the newer type of encoding introduced by Netscape 2.0.
It is suitable for forms that contain very large fields or that
are intended for transferring binary data.  Most importantly,
it enables the "file upload" feature of Netscape 2.0 forms.  For
your convenience, CGI.pm stores the name of this encoding type
in @strong{$CGI::MULTIPART}

Forms that use this type of encoding are not easily interpreted
by CGI scripts unless they use CGI.pm or another library designed
to handle them.

@end table
For compatibility, the startform() method uses the older form of
encoding by default.  If you want to use the newer form of encoding
by default, you can call @strong{start_multipart_form()} instead of
@strong{startform()}.

JAVASCRIPTING: The @strong{-name} and @strong{-onSubmit} parameters are provided
for use with JavaScript.  The -name parameter gives the
form a name so that it can be identified and manipulated by
JavaScript functions.  -onSubmit should point to a JavaScript
function that will be executed just before the form is submitted to your
server.  You can use this opportunity to check the contents of the form 
for consistency and completeness.  If you find something wrong, you
can put up an alert box or maybe fix things up yourself.  You can 
abort the submission by returning false from this function.  

Usually the bulk of JavaScript functions are defined in a <SCRIPT>
block in the HTML header and -onSubmit points to one of these function
call.  See start_html() for details.

@unnumberedsubsec CREATING A TEXT FIELD

@example
print $query->textfield(-name=>@'field_name@',
	                    -default=>@'starting value@',
	                    -size=>50,
	                    -maxlength=>80);
	-or-
@end example

@example
print $query->textfield(@'field_name@',@'starting value@',50,80);
@end example

textfield() will return a text input field.  

@table @asis
@item Parameters
@item 
The first parameter is the required name for the field (-name).  

@item 
The optional second parameter is the default starting value for the field
contents (-default).  

@item 
The optional third parameter is the size of the field in
      characters (-size).

@item 
The optional fourth parameter is the maximum number of characters the
      field will accept (-maxlength).

@end table
As with all these methods, the field will be initialized with its 
previous contents from earlier invocations of the script.
When the form is processed, the value of the text field can be
retrieved with:

@example
$value = $query->param(@'foo@');
@end example

If you want to reset it from its initial value after the script has been
called once, you can do so like this:

@example
$query->param(@'foo@',"I@'m taking over this value!");
@end example

NEW AS OF VERSION 2.15: If you don@'t want the field to take on its previous
value, you can force its current value by using the -override (alias -force)
parameter:

@example
print $query->textfield(-name=>@'field_name@',
	                    -default=>@'starting value@',
			    -override=>1,
	                    -size=>50,
	                    -maxlength=>80);
@end example

JAVASCRIPTING: You can also provide @strong{-onChange}, @strong{-onFocus}, @strong{-onBlur}
and @strong{-onSelect} parameters to register JavaScript event handlers.
The onChange handler will be called whenever the user changes the
contents of the text field.  You can do text validation if you like.
onFocus and onBlur are called respectively when the insertion point
moves into and out of the text field.  onSelect is called when the
user changes the portion of the text that is selected.

@unnumberedsubsec CREATING A BIG TEXT FIELD

@example
print $query->textarea(-name=>@'foo@',
	 		  -default=>@'starting value@',
	                  -rows=>10,
	                  -columns=>50);
@end example

@example
-or
@end example

@example
print $query->textarea(@'foo@',@'starting value@',10,50);
@end example

textarea() is just like textfield, but it allows you to specify
rows and columns for a multiline text entry box.  You can provide
a starting value for the field, which can be long and contain
multiple lines.

JAVASCRIPTING: The @strong{-onChange}, @strong{-onFocus}, @strong{-onBlur}
and @strong{-onSelect} parameters are recognized.  See textfield().

@unnumberedsubsec CREATING A PASSWORD FIELD

@example
print $query->password_field(-name=>@'secret@',
				-value=>@'starting value@',
				-size=>50,
				-maxlength=>80);
	-or-
@end example

@example
print $query->password_field(@'secret@',@'starting value@',50,80);
@end example

password_field() is identical to textfield(), except that its contents 
will be starred out on the web page.

JAVASCRIPTING: The @strong{-onChange}, @strong{-onFocus}, @strong{-onBlur}
and @strong{-onSelect} parameters are recognized.  See textfield().

@unnumberedsubsec CREATING A FILE UPLOAD FIELD

@example
print $query->filefield(-name=>@'uploaded_file@',
	                    -default=>@'starting value@',
	                    -size=>50,
	 		    -maxlength=>80);
	-or-
@end example

@example
print $query->filefield(@'uploaded_file@',@'starting value@',50,80);
@end example

filefield() will return a file upload field for Netscape 2.0 browsers.
In order to take full advantage of this @emph{you must use the new 
multipart encoding scheme} for the form.  You can do this either
by calling @strong{startform()} with an encoding type of @strong{$CGI::MULTIPART},
or by calling the new method @strong{start_multipart_form()} instead of
vanilla @strong{startform()}.

@table @asis
@item Parameters
@item 
The first parameter is the required name for the field (-name).  

@item 
The optional second parameter is the starting value for the field contents
to be used as the default file name (-default).

The beta2 version of Netscape 2.0 currently doesn@'t pay any attention
to this field, and so the starting value will always be blank.  Worse,
the field loses its "sticky" behavior and forgets its previous
contents.  The starting value field is called for in the HTML
specification, however, and possibly later versions of Netscape will
honor it.

@item 
The optional third parameter is the size of the field in
characters (-size).

@item 
The optional fourth parameter is the maximum number of characters the
field will accept (-maxlength).

@end table
When the form is processed, you can retrieve the entered filename
by calling param().

@example
$filename = $query->param(@'uploaded_file@');
@end example

In Netscape Beta 1, the filename that gets returned is the full local filename
on the @strong{remote user@'s} machine.  If the remote user is on a Unix
machine, the filename will follow Unix conventions:

@example
/path/to/the/file
@end example

On an MS-DOS/Windows machine, the filename will follow DOS conventions:

@example
C:\PATH\TO\THE\FILE.MSW
@end example

On a Macintosh machine, the filename will follow Mac conventions:

@example
HD 40:Desktop Folder:Sort Through:Reminders
@end example

In Netscape Beta 2, only the last part of the file path (the filename
itself) is returned.  I don@'t know what the release behavior will be.

The filename returned is also a file handle.  You can read the contents
of the file using standard Perl file reading calls:

@example
# Read a text file and print it out
while (<$filename>) @{
   print;
        @}
@end example

@example
# Copy a binary file to somewhere safe
open (OUTFILE,">>/usr/local/web/users/feedback");
	while ($bytesread=read($filename,$buffer,1024)) @{
	   print OUTFILE $buffer;
@}
@end example

JAVASCRIPTING: The @strong{-onChange}, @strong{-onFocus}, @strong{-onBlur}
and @strong{-onSelect} parameters are recognized.  See textfield()
for details. 

@unnumberedsubsec CREATING A POPUP MENU

@example
print $query->popup_menu(@'menu_name@',
                         [@'eenie@',@'meenie@',@'minie@'],
                         @'meenie@');
@end example

@example
-or-
@end example

@example
%labels = (@'eenie@'=>@'your first choice@',
           @'meenie@'=>@'your second choice@',
           @'minie@'=>@'your third choice@');
print $query->popup_menu(@'menu_name@',
                         [@'eenie@',@'meenie@',@'minie@'],
                         @'meenie@',\%labels);
@end example

@example
-or (named parameter style)-
@end example

@example
print $query->popup_menu(-name=>@'menu_name@',
			    -values=>[@'eenie@',@'meenie@',@'minie@'],
	                    -default=>@'meenie@',
	                    -labels=>\%labels);
@end example

popup_menu() creates a menu.

@enumerate
@item 
The required first argument is the menu@'s name (-name).

@item 
The required second argument (-values) is an array @strong{reference}
containing the list of menu items in the menu.  You can pass the
method an anonymous array, as shown in the example, or a reference to
a named array, such as "\@@foo".

@item 
The optional third parameter (-default) is the name of the default
menu choice.  If not specified, the first item will be the default.
The values of the previous choice will be maintained across queries.

@item 
The optional fourth parameter (-labels) is provided for people who
want to use different values for the user-visible label inside the
popup menu nd the value returned to your script.  It@'s a pointer to an
associative array relating menu values to user-visible labels.  If you
leave this parameter blank, the menu values will be displayed by
default.  (You can also leave a label undefined if you want to).

@end enumerate
When the form is processed, the selected value of the popup menu can
be retrieved using:

@example
$popup_menu_value = $query->param(@'menu_name@');
@end example

JAVASCRIPTING: popup_menu() recognizes the following event handlers:
@strong{-onChange}, @strong{-onFocus}, and @strong{-onBlur}.  See the textfield()
section for details on when these handlers are called.

@unnumberedsubsec CREATING A SCROLLING LIST

@example
print $query->scrolling_list(@'list_name@',
                             [@'eenie@',@'meenie@',@'minie@',@'moe@'],
                             [@'eenie@',@'moe@'],5,@'true@');
   -or-
@end example

@example
print $query->scrolling_list(@'list_name@',
                             [@'eenie@',@'meenie@',@'minie@',@'moe@'],
                             [@'eenie@',@'moe@'],5,@'true@',
                             \%labels);
@end example

@example
-or-
@end example

@example
print $query->scrolling_list(-name=>@'list_name@',
                             -values=>[@'eenie@',@'meenie@',@'minie@',@'moe@'],
                             -default=>[@'eenie@',@'moe@'],
	                        -size=>5,
	                        -multiple=>@'true@',
                             -labels=>\%labels);
@end example

scrolling_list() creates a scrolling list.  

@table @asis
@item Parameters:
@item 
The first and second arguments are the list name (-name) and values
(-values).  As in the popup menu, the second argument should be an
array reference.

@item 
The optional third argument (-default) can be either a reference to a
list containing the values to be selected by default, or can be a
single value to select.  If this argument is missing or undefined,
then nothing is selected when the list first appears.  In the named
parameter version, you can use the synonym "-defaults" for this
parameter.

@item 
The optional fourth argument is the size of the list (-size).

@item 
The optional fifth argument can be set to true to allow multiple
simultaneous selections (-multiple).  Otherwise only one selection
will be allowed at a time.

@item 
The optional sixth argument is a pointer to an associative array
containing long user-visible labels for the list items (-labels).
If not provided, the values will be displayed.

When this form is processed, all selected list items will be returned as
a list under the parameter name @'list_name@'.  The values of the
selected items can be retrieved with:

@example
@@selected = $query->param(@'list_name@');
@end example

@end table
JAVASCRIPTING: scrolling_list() recognizes the following event handlers:
@strong{-onChange}, @strong{-onFocus}, and @strong{-onBlur}.  See textfield() for
the description of when these handlers are called.

@unnumberedsubsec CREATING A GROUP OF RELATED CHECKBOXES

@example
print $query->checkbox_group(-name=>@'group_name@',
                             -values=>[@'eenie@',@'meenie@',@'minie@',@'moe@'],
                             -default=>[@'eenie@',@'moe@'],
	                        -linebreak=>@'true@',
	                        -labels=>\%labels);
@end example

@example
print $query->checkbox_group(@'group_name@',
                             [@'eenie@',@'meenie@',@'minie@',@'moe@'],
                             [@'eenie@',@'moe@'],@'true@',\%labels);
@end example

@example
HTML3-COMPATIBLE BROWSERS ONLY:
@end example

@example
print $query->checkbox_group(-name=>@'group_name@',
                             -values=>[@'eenie@',@'meenie@',@'minie@',@'moe@'],
	                        -rows=2,-columns=>2);
 
@end example

checkbox_group() creates a list of checkboxes that are related
by the same name.

@table @asis
@item Parameters:
@item 
The first and second arguments are the checkbox name and values,
respectively (-name and -values).  As in the popup menu, the second
argument should be an array reference.  These values are used for the
user-readable labels printed next to the checkboxes as well as for the
values passed to your script in the query string.

@item 
The optional third argument (-default) can be either a reference to a
list containing the values to be checked by default, or can be a
single value to checked.  If this argument is missing or undefined,
then nothing is selected when the list first appears.

@item 
The optional fourth argument (-linebreak) can be set to true to place
line breaks between the checkboxes so that they appear as a vertical
list.  Otherwise, they will be strung together on a horizontal line.

@item 
The optional fifth argument is a pointer to an associative array
relating the checkbox values to the user-visible labels that will will
be printed next to them (-labels).  If not provided, the values will
be used as the default.

@item 
@strong{HTML3-compatible browsers} (such as Netscape) can take advantage 
of the optional 
parameters @strong{-rows}, and @strong{-columns}.  These parameters cause
checkbox_group() to return an HTML3 compatible table containing
the checkbox group formatted with the specified number of rows
and columns.  You can provide just the -columns parameter if you
wish; checkbox_group will calculate the correct number of rows
for you.

To include row and column headings in the returned table, you
can use the @strong{-rowheader} and @strong{-colheader} parameters.  Both
of these accept a pointer to an array of headings to use.
The headings are just decorative.  They don@'t reorganize the
interpretation of the checkboxes -- they@'re still a single named
unit.

@end table
When the form is processed, all checked boxes will be returned as
a list under the parameter name @'group_name@'.  The values of the
"on" checkboxes can be retrieved with:

@example
@@turned_on = $query->param(@'group_name@');
@end example

The value returned by checkbox_group() is actually an array of button
elements.  You can capture them and use them within tables, lists,
or in other creative ways:

@example
@@h = $query->checkbox_group(-name=>@'group_name@',-values=>\@@values);
&use_in_creative_way(@@h);
@end example

JAVASCRIPTING: checkbox_group() recognizes the @strong{-onClick}
parameter.  This specifies a JavaScript code fragment or
function call to be executed every time the user clicks on
any of the buttons in the group.  You can retrieve the identity
of the particular button clicked on using the "this" variable.

@unnumberedsubsec CREATING A STANDALONE CHECKBOX

@example
print $query->checkbox(-name=>@'checkbox_name@',
			   -checked=>@'checked@',
		           -value=>@'ON@',
		           -label=>@'CLICK ME@');
@end example

@example
-or-
@end example

@example
print $query->checkbox(@'checkbox_name@',@'checked@',@'ON@',@'CLICK ME@');
@end example

checkbox() is used to create an isolated checkbox that isn@'t logically
related to any others.

@table @asis
@item Parameters:
@item 
The first parameter is the required name for the checkbox (-name).  It
will also be used for the user-readable label printed next to the
checkbox.

@item 
The optional second parameter (-checked) specifies that the checkbox
is turned on by default.  Synonyms are -selected and -on.

@item 
The optional third parameter (-value) specifies the value of the
checkbox when it is checked.  If not provided, the word "on" is
assumed.

@item 
The optional fourth parameter (-label) is the user-readable label to
be attached to the checkbox.  If not provided, the checkbox name is
used.

@end table
The value of the checkbox can be retrieved using:

@example
$turned_on = $query->param(@'checkbox_name@');
@end example

JAVASCRIPTING: checkbox() recognizes the @strong{-onClick}
parameter.  See checkbox_group() for further details.

@unnumberedsubsec CREATING A RADIO BUTTON GROUP

@example
print $query->radio_group(-name=>@'group_name@',
			     -values=>[@'eenie@',@'meenie@',@'minie@'],
                          -default=>@'meenie@',
			     -linebreak=>@'true@',
			     -labels=>\%labels);
@end example

@example
-or-
@end example

@example
print $query->radio_group(@'group_name@',[@'eenie@',@'meenie@',@'minie@'],
                                       @'meenie@',@'true@',\%labels);
@end example

@example
HTML3-COMPATIBLE BROWSERS ONLY:
@end example

@example
print $query->radio_group(-name=>@'group_name@',
                          -values=>[@'eenie@',@'meenie@',@'minie@',@'moe@'],
	                     -rows=2,-columns=>2);
@end example

radio_group() creates a set of logically-related radio buttons
(turning one member of the group on turns the others off)

@table @asis
@item Parameters:
@item 
The first argument is the name of the group and is required (-name).

@item 
The second argument (-values) is the list of values for the radio
buttons.  The values and the labels that appear on the page are
identical.  Pass an array @emph{reference} in the second argument, either
using an anonymous array, as shown, or by referencing a named array as
in "\@@foo".

@item 
The optional third parameter (-default) is the name of the default
button to turn on. If not specified, the first item will be the
default.  You can provide a nonexistent button name, such as "-" to
start up with no buttons selected.

@item 
The optional fourth parameter (-linebreak) can be set to @'true@' to put
line breaks between the buttons, creating a vertical list.

@item 
The optional fifth parameter (-labels) is a pointer to an associative
array relating the radio button values to user-visible labels to be
used in the display.  If not provided, the values themselves are
displayed.

@item 
@strong{HTML3-compatible browsers} (such as Netscape) can take advantage 
of the optional 
parameters @strong{-rows}, and @strong{-columns}.  These parameters cause
radio_group() to return an HTML3 compatible table containing
the radio group formatted with the specified number of rows
and columns.  You can provide just the -columns parameter if you
wish; radio_group will calculate the correct number of rows
for you.

To include row and column headings in the returned table, you
can use the @strong{-rowheader} and @strong{-colheader} parameters.  Both
of these accept a pointer to an array of headings to use.
The headings are just decorative.  They don@'t reorganize the
interpetation of the radio buttons -- they@'re still a single named
unit.

@end table
When the form is processed, the selected radio button can
be retrieved using:

@example
$which_radio_button = $query->param(@'group_name@');
@end example

The value returned by radio_group() is actually an array of button
elements.  You can capture them and use them within tables, lists,
or in other creative ways:

@example
@@h = $query->radio_group(-name=>@'group_name@',-values=>\@@values);
&use_in_creative_way(@@h);
@end example

@unnumberedsubsec CREATING A SUBMIT BUTTON 

@example
print $query->submit(-name=>@'button_name@',
		        -value=>@'value@');
@end example

@example
-or-
@end example

@example
print $query->submit(@'button_name@',@'value@');
@end example

submit() will create the query submission button.  Every form
should have one of these.

@table @asis
@item Parameters:
@item 
The first argument (-name) is optional.  You can give the button a
name if you have several submission buttons in your form and you want
to distinguish between them.  The name will also be used as the
user-visible label.  Be aware that a few older browsers don@'t deal with this correctly and
@strong{never} send back a value from a button.

@item 
The second argument (-value) is also optional.  This gives the button
a value that will be passed to your script in the query string.

@end table
You can figure out which button was pressed by using different
values for each one:

@example
$which_one = $query->param(@'button_name@');
@end example

JAVASCRIPTING: radio_group() recognizes the @strong{-onClick}
parameter.  See checkbox_group() for further details.

@unnumberedsubsec CREATING A RESET BUTTON

@example
print $query->reset
@end example

reset() creates the "reset" button.  Note that it restores the
form to its value from the last time the script was called, 
NOT necessarily to the defaults.

@unnumberedsubsec CREATING A DEFAULT BUTTON

@example
print $query->defaults(@'button_label@')
@end example

defaults() creates a button that, when invoked, will cause the
form to be completely reset to its defaults, wiping out all the
changes the user ever made.

@unnumberedsubsec CREATING A HIDDEN FIELD

@example
print $query->hidden(-name=>@'hidden_name@',
                     -default=>[@'value1@',@'value2@'...]);
@end example

@example
-or-
@end example

@example
print $query->hidden(@'hidden_name@',@'value1@',@'value2@'...);
@end example

hidden() produces a text field that can@'t be seen by the user.  It
is useful for passing state variable information from one invocation
of the script to the next.

@table @asis
@item Parameters:
@item 
The first argument is required and specifies the name of this
field (-name).

@item 
The second argument is also required and specifies its value
(-default).  In the named parameter style of calling, you can provide
a single value here or a reference to a whole list

@end table
Fetch the value of a hidden field this way:

@example
$hidden_value = $query->param(@'hidden_name@');
@end example

Note, that just like all the other form elements, the value of a
hidden field is "sticky".  If you want to replace a hidden field with
some other values after the script has been called once you@'ll have to
do it manually:

@example
$query->param(@'hidden_name@',@'new@',@'values@',@'here@');
@end example

@unnumberedsubsec CREATING A CLICKABLE IMAGE BUTTON

@example
print $query->image_button(-name=>@'button_name@',
			        -src=>@'/source/URL@',
			        -align=>@'MIDDLE@');	
@end example

@example
-or-
@end example

@example
print $query->image_button(@'button_name@',@'/source/URL@',@'MIDDLE@');
@end example

image_button() produces a clickable image.  When it@'s clicked on the
position of the click is returned to your script as "button_name.x"
and "button_name.y", where "button_name" is the name you@'ve assigned
to it.

JAVASCRIPTING: image_button() recognizes the @strong{-onClick}
parameter.  See checkbox_group() for further details.

@table @asis
@item Parameters:
@item 
The first argument (-name) is required and specifies the name of this
field.

@item 
The second argument (-src) is also required and specifies the URL

@item The third option (-align, optional) is an alignment type, and may be TOP, BOTTOM or MIDDLE
@end table
Fetch the value of the button this way:
     $x = $query->param(@'button_name.x@');
     $y = $query->param(@'button_name.y@');

@unnumberedsubsec CREATING A JAVASCRIPT ACTION BUTTON

@example
print $query->button(-name=>@'button_name@',
                     -value=>@'user visible label@',
                     -onClick=>"do_something()");
@end example

@example
-or-
@end example

@example
print $query->button(@'button_name@',"do_something()");
@end example

button() produces a button that is compatible with Netscape 2.0@'s
JavaScript.  When it@'s pressed the fragment of JavaScript code
pointed to by the @strong{-onClick} parameter will be executed.  On
non-Netscape browsers this form element will probably not even
display.

@unnumberedsec NETSCAPE COOKIES

Netscape browsers versions 1.1 and higher support a so-called
"cookie" designed to help maintain state within a browser session.
CGI.pm has several methods that support cookies.

A cookie is a name=value pair much like the named parameters in a CGI
query string.  CGI scripts create one or more cookies and send
them to the browser in the HTTP header.  The browser maintains a list
of cookies that belong to a particular Web server, and returns them
to the CGI script during subsequent interactions.

In addition to the required name=value pair, each cookie has several
optional attributes:

@enumerate
@item 
an expiration time
This is a time/date string (in a special GMT format) that indicates
when a cookie expires.  The cookie will be saved and returned to your
script until this expiration date is reached if the user exits
Netscape and restarts it.  If an expiration date isn@'t specified, the cookie
will remain active until the user quits Netscape.

@item 
a domain
This is a partial or complete domain name for which the cookie is 
valid.  The browser will return the cookie to any host that matches
the partial domain name.  For example, if you specify a domain name
of ".capricorn.com", then Netscape will return the cookie to
Web servers running on any of the machines "www.capricorn.com", 
"www2.capricorn.com", "feckless.capricorn.com", etc.  Domain names
must contain at least two periods to prevent attempts to match
on top level domains like ".edu".  If no domain is specified, then
the browser will only return the cookie to servers on the host the
cookie originated from.

@item 
a path
If you provide a cookie path attribute, the browser will check it
against your script@'s URL before returning the cookie.  For example,
if you specify the path "/cgi-bin", then the cookie will be returned
to each of the scripts "/cgi-bin/tally.pl", "/cgi-bin/order.pl",
and "/cgi-bin/customer_service/complain.pl", but not to the script
"/cgi-private/site_admin.pl".  By default, path is set to "/", which
causes the cookie to be sent to any CGI script on your site.

@item 
a "secure" flag
If the "secure" attribute is set, the cookie will only be sent to your
script if the CGI request is occurring on a secure channel, such as SSL.

@end enumerate
The interface to Netscape cookies is the @strong{cookie()} method:

@example
$cookie = $query->cookie(-name=>@'sessionID@',
			     -value=>@'xyzzy@',
			     -expires=>@'+1h@',
			     -path=>@'/cgi-bin/database@',
			     -domain=>@'.capricorn.org@',
			     -secure=>1);
print $query->header(-cookie=>$cookie);
@end example

@strong{cookie()} creates a new cookie.  Its parameters include:

@table @asis
@item @strong{-name}
The name of the cookie (required).  This can be any string at all.
Although Netscape limits its cookie names to non-whitespace
alphanumeric characters, CGI.pm removes this restriction by escaping
and unescaping cookies behind the scenes.

@item @strong{-value}
The value of the cookie.  This can be any scalar value,
array reference, or even associative array reference.  For example,
you can store an entire associative array into a cookie this way:

@example
$cookie=$query->cookie(-name=>@'family information@',
                               -value=>\%childrens_ages);
@end example

@item @strong{-path}
The optional partial path for which this cookie will be valid, as described
above.

@item @strong{-domain}
The optional partial domain for which this cookie will be valid, as described
above.

@item @strong{-expires}
The optional expiration date for this cookie.  The format is as described 
in the section on the @strong{header()} method:

@example
"+1h"  one hour from now
@end example

@item @strong{-secure}
If set to true, this cookie will only be used within a secure
SSL session.

@end table
The cookie created by cookie() must be incorporated into the HTTP
header within the string returned by the header() method:

@example
print $query->header(-cookie=>$my_cookie);
@end example

To create multiple cookies, give header() an array reference:

@example
$cookie1 = $query->cookie(-name=>@'riddle_name@',
                                  -value=>"The Sphynx@'s Question");
        $cookie2 = $query->cookie(-name=>@'answers@',
                                  -value=>\%answers);
        print $query->header(-cookie=>[$cookie1,$cookie2]);
@end example

To retrieve a cookie, request it by name by calling cookie()
method without the @strong{-value} parameter:

@example
use CGI;
$query = new CGI;
%answers = $query->cookie(-name=>@'answers@');
# $query->cookie(@'answers@') will work too!
@end example

The cookie and CGI namespaces are separate.  If you have a parameter
named @'answers@' and a cookie named @'answers@', the values retrieved by
param() and cookie() are independent of each other.  However, it@'s
simple to turn a CGI parameter into a cookie, and vice-versa:

@example
# turn a CGI parameter into a cookie
$c=$q->cookie(-name=>@'answers@',-value=>[$q->param(@'answers@')]);
# vice-versa
$q->param(-name=>@'answers@',-value=>[$q->cookie(@'answers@')]);
@end example

See the @strong{cookie.cgi} example script for some ideas on how to use
cookies effectively.

@strong{NOTE:} There appear to be some (undocumented) restrictions on
Netscape cookies.  In Netscape 2.01, at least, I haven@'t been able to
set more than three cookies at a time.  There may also be limits on
the length of cookies.  If you need to store a lot of information,
it@'s probably better to create a unique session ID, store it in a
cookie, and use the session ID to locate an external file/database
saved on the server@'s side of the connection.

@unnumberedsec WORKING WITH NETSCAPE FRAMES

It@'s possible for CGI.pm scripts to write into several browser
panels and windows using Netscape@'s frame mechanism.  
There are three techniques for defining new frames programmatically:

@enumerate
@item 
Create a <Frameset> document
After writing out the HTTP header, instead of creating a standard
HTML document using the start_html() call, create a <FRAMESET> 
document that defines the frames on the page.  Specify your script(s)
(with appropriate parameters) as the SRC for each of the frames.

There is no specific support for creating <FRAMESET> sections 
in CGI.pm, but the HTML is very simple to write.  See the frame
documentation in Netscape@'s home pages for details 

@example
http://home.netscape.com/assist/net_sites/frames.html
@end example

@item 
Specify the destination for the document in the HTTP header
You may provide a @strong{-target} parameter to the header() method:
   
    print $q->header(-target=>@'ResultsWindow@');

This will tell Netscape to load the output of your script into the
frame named "ResultsWindow".  If a frame of that name doesn@'t
already exist, Netscape will pop up a new window and load your
script@'s document into that.  There are a number of magic names
that you can use for targets.  See the frame documents on Netscape@'s
home pages for details.

@item 
Specify the destination for the document in the <FORM> tag
You can specify the frame to load in the FORM tag itself.  With
CGI.pm it looks like this:

@example
print $q->startform(-target=>@'ResultsWindow@');
@end example

When your script is reinvoked by the form, its output will be loaded
into the frame named "ResultsWindow".  If one doesn@'t already exist
a new window will be created.

@end enumerate
The script "frameset.cgi" in the examples directory shows one way to
create pages in which the fill-out form and the response live in
side-by-side frames.

@unnumberedsec DEBUGGING

If you are running the script
from the command line or in the perl debugger, you can pass the script
a list of keywords or parameter=value pairs on the command line or 
from standard input (you don@'t have to worry about tricking your
script into reading from environment variables).
You can pass keywords like this:

@example
your_script.pl keyword1 keyword2 keyword3
@end example

or this:

@example
your_script.pl keyword1+keyword2+keyword3
@end example

or this:

@example
your_script.pl name1=value1 name2=value2
@end example

or this:

@example
your_script.pl name1=value1&name2=value2
@end example

or even as newline-delimited parameters on standard input.

When debugging, you can use quotes and backslashes to escape 
characters in the familiar shell manner, letting you place
spaces and other funny characters in your parameter=value
pairs:

@example
your_script.pl "name1=@'I am a long value@'" "name2=two\ words"
@end example

@unnumberedsubsec DUMPING OUT ALL THE NAME/VALUE PAIRS

The dump() method produces a string consisting of all the query@'s
name/value pairs formatted nicely as a nested list.  This is useful
for debugging purposes:

@example
print $query->dump

@end example

Produces something that looks like:

@example
<UL>
<LI>name1
    <UL>
    <LI>value1
    <LI>value2
    </UL>
<LI>name2
    <UL>
    <LI>value1
    </UL>
</UL>
@end example

You can pass a value of @'true@' to dump() in order to get it to
print the results out as plain text, suitable for incorporating
into a <PRE> section.

As a shortcut, as of version 1.56 you can interpolate the entire 
CGI object into a string and it will be replaced with the
the a nice HTML dump shown above:

@example
$query=new CGI;
print "<H2>Current Values</H2> $query\n";
@end example

@unnumberedsec FETCHING ENVIRONMENT VARIABLES

Some of the more useful environment variables can be fetched
through this interface.  The methods are as follows:

@table @asis
@item accept()
Return a list of MIME types that the remote browser
accepts. If you give this method a single argument
corresponding to a MIME type, as in
$query->accept(@'text/html@'), it will return a
floating point value corresponding to the browser@'s
preference for this type from 0.0 (don@'t want) to 1.0.
Glob types (e.g. text/*) in the browser@'s accept list
are handled correctly.

@item raw_cookie()
Returns the HTTP_COOKIE variable, an HTTP extension
implemented by Netscape browsers version 1.1
and higher.  Cookies have a special format, and this 
method call just returns the raw form (?cookie dough).
See cookie() for ways of setting and retrieving
cooked cookies.

@item user_agent()
Returns the HTTP_USER_AGENT variable.  If you give
this method a single argument, it will attempt to
pattern match on it, allowing you to do something
like $query->user_agent(netscape);

@item path_info()
Returns additional path information from the script URL.
E.G. fetching /cgi-bin/your_script/additional/stuff will
result in $query->path_info() returning
"additional/stuff".

@item path_translated()
As per path_info() but returns the additional
path information translated into a physical path, e.g.
"/usr/local/etc/httpd/htdocs/additional/stuff".

@item remote_host()
Returns either the remote host name or IP address.
if the former is unavailable.

@item script_name() Return the script name as a partial URL, for self-refering scripts.
@itemx referer()
Return the URL of the page the browser was viewing
prior to fetching your script.  Not available for all
browsers.

@item @strong{auth_type ()}
Return the authorization/verification method in use for this
script, if any.

@item @strong{remote_user ()}
Return the authorization/verification name used for user
verification, if this script is protected.

@item @strong{user_name ()}
Attempt to obtain the remote user@'s name, using a variety
of different techniques.  This only works with older browsers
such as Mosaic.  Netscape does not reliably report the user
name!

@item request_method()
Returns the method used to access your script, usually
one of @'POST@', @'GET@' or @'HEAD@'.

@end table
@unnumberedsec CREATING HTML ELEMENTS:

In addition to its shortcuts for creating form elements, CGI.pm
defines general HTML shortcut methods as well.  HTML shortcuts are
named after a single HTML element and return a fragment of HTML text
that you can then print or manipulate as you like.

This example shows how to use the HTML methods:

@example
$q = new CGI;
print $q->blockquote(
		     "Many years ago on the island of",
		     $q->a(@{href=>"http://crete.org/"@},"Crete"),
		     "there lived a minotaur named",
                             $q->strong("Fred."),
		    ),
               $q->hr;
@end example

This results in the following HTML code (extra newlines have been
added for readability):

@example
<blockquote>
        Many years ago on the island of
<a HREF="http://crete.org/">Crete</a> there lived
        a minotaur named <strong>Fred.</strong> 
        </blockquote>
        <hr>
@end example

If you find the syntax for calling the HTML shortcuts awkward, you can
import them into your namespace and dispense with the object syntax
completely (see the next section for more details):

@example
use CGI shortcuts;	# IMPORT HTML SHORTCUTS
print blockquote(
	     "Many years ago on the island of",
	     a(@{href=>"http://crete.org/"@},"Crete"),
	     "there lived a minotaur named",
                     strong("Fred."),
	     ),
               hr;
@end example

@unnumberedsubsec PROVIDING ARGUMENTS TO HTML SHORTCUTS

The HTML methods will accept zero, one or multiple arguments.  If you
provide no arguments, you get a single tag:

@example
print hr;  
#  gives "<hr>"
@end example

If you provide one or more string arguments, they are concatenated
together with spaces and placed between opening and closing tags:

@example
print h1("Chapter","1"); 
# gives "<h1>Chapter 1</h1>"
@end example

If the first argument is an associative array reference, then the keys
and values of the associative array become the HTML tag@'s attributes:

@example
print a(@{href=>@'fred.html@',target=>@'_new@'@},
	"Open a new frame");
# gives <a href="fred.html",target="_new">Open a new frame</a>
@end example

You are free to use CGI.pm-style dashes in front of the attribute
names if you prefer:

@example
print img @{-src=>@'fred.gif@',-align=>@'LEFT@'@};
# gives <img ALIGN="LEFT" SRC="fred.gif">
@end example

@unnumberedsubsec Generating new HTML tags

Since no mere mortal can keep up with Netscape and Microsoft as they
battle it out for control of HTML, the code that generates HTML tags
is general and extensible.  You can create new HTML tags freely just
by referring to them on the import line:

@example
use CGI shortcuts,winkin,blinkin,nod;
@end example

Now, in addition to the standard CGI shortcuts, you@'ve created HTML
tags named "winkin", "blinkin" and "nod".  You can use them like this:

@example
print blinkin @{color=>@'blue@',rate=>@'fast@'@},"Yahoo!";
# <blinkin COLOR="blue" RATE="fast">Yahoo!</blinkin>
@end example

@unnumberedsec IMPORTING CGI METHOD CALLS INTO YOUR NAME SPACE

As a convenience, you can import most of the CGI method calls directly
into your name space.  The syntax for doing this is:

@example
use CGI <list of methods>;
@end example

The listed methods will be imported into the current package; you can
call them directly without creating a CGI object first.  This example
shows how to import the @strong{param()} and @strong{header()}
methods, and then use them directly:

@example
use CGI param,header;
print header(@'text/plain@');
$zipcode = param(@'zipcode@');
@end example

You can import groups of methods by referring to a number of special
names:

@table @asis
@item cgi
Import all CGI-handling methods, such as @strong{param()}, path_info()
and the like.

@item form
Import all fill-out form generating methods, such as @strong{textfield()}.

@item html2
Import all methods that generate HTML 2.0 standard elements.

@item html3
Import all methods that generate HTML 3.0 proposed elements (such as
<table>, <super> and <sub>).

@item netscape
Import all methods that generate Netscape-specific HTML extensions.

@item shortcuts
Import all HTML-generating shortcuts (i.e. @'html2@' + @'html3@' +
@'netscape@')...

@item standard
Import "standard" features, @'html2@', @'form@' and @'cgi@'.

@item all
Import all the available methods.  For the full list, see the CGI.pm
code, where the variable %TAGS is defined.

@end table
Note that in the interests of execution speed CGI.pm does @strong{not} use
the standard @xref{Exporter,Exporter}, syntax for specifying load symbols.  This may
change in the future.

If you import any of the state-maintaining CGI or form-generating
methods, a default CGI object will be created and initialized
automatically the first time you use any of the methods that require
one to be present.  This includes @strong{param()}, @strong{textfield()},
@strong{submit()} and the like.  (If you need direct access to the CGI
object, you can find it in the global variable @strong{$CGI::Q}).  By
importing CGI.pm methods, you can create visually elegant scripts:

@example
use CGI standard,html2;
print 
    header,
    start_html(@'Simple Script@'),
    h1(@'Simple Script@'),
    start_form,
    "What@'s your name? ",textfield(@'name@'),p,
    "What@'s the combination?",
    checkbox_group(-name=>@'words@',
	  	      -values=>[@'eenie@',@'meenie@',@'minie@',@'moe@'],
		      -defaults=>[@'eenie@',@'moe@']),p,
    "What@'s your favorite color?",
    popup_menu(-name=>@'color@',
	          -values=>[@'red@',@'green@',@'blue@',@'chartreuse@']),p,
    submit,
    end_form,
    hr,"\n";
@end example

@example
if (param) @{
   print 
	   "Your name is ",em(param(@'name@')),p,
	   "The keywords are: ",em(join(", ",param(@'words@'))),p,
	   "Your favorite color is ",em(param(@'color@')),".\n";
@}
print end_html;
@end example

@unnumberedsec AUTHOR INFORMATION

Copyright 1995,1996, Lincoln D. Stein.  All rights reserved.  It may
be used and modified freely, but I do request that this copyright
notice remain attached to the file.  You may modify this module as you
wish, but if you redistribute a modified version, please attach a note
listing the modifications you have made.

Address bug reports and comments to:
lstein@@genome.wi.mit.edu

@unnumberedsec CREDITS

Thanks very much to:

@table @asis
@item Matt Heffron (heffron@@falstaff.css.beckman.com)
@itemx James Taylor (james.taylor@@srs.gov)
@itemx Scott Anguish <sanguish@@digifix.com>
@itemx Mike Jewell (mlj3u@@virginia.edu)
@itemx Timothy Shimmin (tes@@kbs.citri.edu.au)
@itemx Joergen Haegg (jh@@axis.se)
@itemx Laurent Delfosse (delfosse@@csgrad1.cs.wvu.edu)
@itemx Richard Resnick (applepi1@@aol.com)
@itemx Craig Bishop (csb@@barwonwater.vic.gov.au)
@itemx Tony Curtis (tc@@vcpc.univie.ac.at)
@itemx Tim Bunce (Tim.Bunce@@ig.co.uk)
@itemx Tom Christiansen (tchrist@@convex.com)
@itemx Andreas Koenig (k@@franz.ww.TU-Berlin.DE)
@itemx Tim MacKenzie (Tim.MacKenzie@@fulcrum.com.au)
@itemx Kevin B. Hendricks (kbhend@@dogwood.tyler.wm.edu)
@itemx Stephen Dahmen (joyfire@@inxpress.net)
@itemx ...and many many more...
for suggestions and bug fixes.

@end table
@unnumberedsec A COMPLETE EXAMPLE OF A SIMPLE FORM-BASED SCRIPT

@example
#!/usr/local/bin/perl
     
    	use CGI;
 
$query = new CGI;
@end example

@example
print $query->header;
print $query->start_html("Example CGI.pm Form");
print "<H1> Example CGI.pm Form</H1>\n";
&print_prompt($query);
&do_work($query);
	&print_tail;
print $query->end_html;
 
sub print_prompt @{
     	   my($query) = @@_;
 
     	   print $query->startform;
     	   print "<EM>What@'s your name?</EM><BR>";
     	   print $query->textfield(@'name@');
     	   print $query->checkbox(@'Not my real name@');
 
     	   print "<P><EM>Where can you find English Sparrows?</EM><BR>";
     	   print $query->checkbox_group(
                                 -name=>@'Sparrow locations@',
			 -values=>[England,France,Spain,Asia,Hoboken],
			         -linebreak=>@'yes@',
			 -defaults=>[England,Asia]);
 
     	   print "<P><EM>How far can they fly?</EM><BR>",
            	$query->radio_group(
			-name=>@'how far@',
	        -values=>[@'10 ft@',@'1 mile@',@'10 miles@',@'real far@'],
	        -default=>@'1 mile@');
 
     	   print "<P><EM>What@'s your favorite color?</EM>  ";
     	   print $query->popup_menu(-name=>@'Color@',
				    -values=>[@'black@',@'brown@',@'red@',@'yellow@'],
				    -default=>@'red@');
 
     	   print $query->hidden(@'Reference@',@'Monty Python and the Holy Grail@');
 
     	   print "<P><EM>What have you got there?</EM><BR>";
     	   print $query->scrolling_list(
			 -name=>@'possessions@',
		 -values=>[@'A Coconut@',@'A Grail@',@'An Icon@',
		           @'A Sword@',@'A Ticket@'],
		 -size=>5,
		 -multiple=>@'true@');
 
     	   print "<P><EM>Any parting comments?</EM><BR>";
     	   print $query->textarea(-name=>@'Comments@',
		                  -rows=>10,
				  -columns=>50);
 
     	   print "<P>",$query->reset;
     	   print $query->submit(@'Action@',@'Shout@');
     	   print $query->submit(@'Action@',@'Scream@');
     	   print $query->endform;
     	   print "<HR>\n";
@}
 
sub do_work @{
     	   my($query) = @@_;
     	   my(@@values,$key);
@end example

@example
print "<H2>Here are the current settings in this form</H2>";
@end example

@example
foreach $key ($query->param) @{
 	      print "<STRONG>$key</STRONG> -> ";
 	      @@values = $query->param($key);
 	      print join(", ",@@values),"<BR>\n";
          @}
 	@}
 
 	sub print_tail @{
print <<END;
 	<HR>
 	<ADDRESS>Lincoln D. Stein</ADDRESS><BR>
 	<A HREF="/">Home Page</A>
 	END
 	@}
@end example

@unnumberedsec BUGS

This module has grown large and monolithic.  Furthermore it@'s doing many
things, such as handling URLs, parsing CGI input, writing HTML, etc., that
should be done in separate modules.  It should be discarded in favor of
the CGI::* modules, but somehow I continue to work on it.

Note that the code is truly contorted in order to avoid spurious
warnings when programs are run with the -w switch.

@unnumberedsec SEE ALSO

@xref{CGI/Carp,CGI/Carp},, @xref{URI/URL,URI/URL},, @xref{CGI/Request,CGI/Request},, @xref{CGI/MiniSvr,CGI/MiniSvr},,
@xref{CGI/Base,CGI/Base},, @xref{CGI/Form,CGI/Form},

